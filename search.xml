<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>WebRTC实现本地视频通话 | 全流程详解</title>
      <link href="/2025/03/04/%E6%B7%B1%E5%85%A5%E5%89%8D%E7%AB%AF/WebRTC%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E8%A7%86%E9%A2%91%E9%80%9A%E8%AF%9D%E5%85%A8%E6%B5%81%E7%A8%8B/"/>
      <url>/2025/03/04/%E6%B7%B1%E5%85%A5%E5%89%8D%E7%AB%AF/WebRTC%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E8%A7%86%E9%A2%91%E9%80%9A%E8%AF%9D%E5%85%A8%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="WebRTC-实现本地视频通话-全流程详解"><a href="#WebRTC-实现本地视频通话-全流程详解" class="headerlink" title="WebRTC 实现本地视频通话 | 全流程详解"></a>WebRTC 实现本地视频通话 | 全流程详解</h1><p>源码见仓库 <a href="https://github.com/Breezli/WebRTC_Demo">Breezli&#x2F;WebRTC_Demo: 基于 WebRTC 技术实现的本地网页端视频通话</a></p><p>分为前后端两个文件夹</p><blockquote><p>webrtc-client (客户端)</p><p>webrtc-server (服务端)</p></blockquote><h2 id="预先准备"><a href="#预先准备" class="headerlink" title="预先准备"></a>预先准备</h2><h3 id="webrtc-client"><a href="#webrtc-client" class="headerlink" title="webrtc-client"></a>webrtc-client</h3><p>前端页面绘制</p><p><code>依赖下载</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pnpm create vite@latest webrtc-client -- --template vue-ts</span><br><span class="line">pnpm install -D tailwindcss postcss autoprefixer</span><br><span class="line">npx tailwindcss init -p</span><br></pre></td></tr></table></figure><p><code>package.json</code>直通</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webrtc-client&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-tsc -b &amp;&amp; vite build&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;preview&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite preview&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;socket.io-client&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.8.1&quot;</span><span class="punctuation">,</span> <span class="comment">//重要依赖</span></span><br><span class="line"><span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.5.13&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;@vitejs/plugin-vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.2.1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;@vue/tsconfig&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.7.0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;autoprefixer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^10.4.20&quot;</span><span class="punctuation">,</span> <span class="comment">//自动添加css前缀</span></span><br><span class="line"><span class="attr">&quot;postcss&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^8.4.49&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;tailwindcss&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.4.17&quot;</span><span class="punctuation">,</span> <span class="comment">//tailwindcss样式库</span></span><br><span class="line"><span class="attr">&quot;typescript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~5.6.2&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;vite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^6.0.5&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;vue-tsc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.2.0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>App.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;flex items-center flex-col text-center p-12 h-screen&quot;&gt;</span><br><span class="line">&lt;div class=&quot;relative h-full mb-4&quot;&gt;</span><br><span class="line">&lt;video</span><br><span class="line">ref=&quot;localVideo&quot;</span><br><span class="line">class=&quot;w-96 h-full bg-gray-200 mb-4 object-cover&quot;&gt;&lt;/video&gt;</span><br><span class="line">&lt;video</span><br><span class="line">ref=&quot;remoteVideo&quot;</span><br><span class="line">class=&quot;w-32 h-48 absolute bottom-0 right-0 object-cover&quot;&gt;&lt;/video&gt;</span><br><span class="line">&lt;div</span><br><span class="line">v-if=&quot;caller &amp;&amp; calling&quot;</span><br><span class="line">class=&quot;absolute top-2/3 left-36 flex flex-col items-center&quot;&gt;</span><br><span class="line">&lt;p class=&quot;mb-4 text-white&quot;&gt;等待对方接听...&lt;/p&gt;</span><br><span class="line">&lt;img</span><br><span class="line">@click=&quot;hangUp&quot;</span><br><span class="line">src=&quot;/refuse.svg&quot;</span><br><span class="line">class=&quot;w-16 cursor-pointer&quot;</span><br><span class="line">alt=&quot;&quot; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div</span><br><span class="line">v-if=&quot;called &amp;&amp; calling&quot;</span><br><span class="line">class=&quot;absolute top-2/3 left-32 flex flex-col items-center&quot;&gt;</span><br><span class="line">&lt;p class=&quot;mb-4 text-white&quot;&gt;收到视频邀请...&lt;/p&gt;</span><br><span class="line">&lt;div class=&quot;flex&quot;&gt;</span><br><span class="line">&lt;img</span><br><span class="line">@click=&quot;hangUp&quot;</span><br><span class="line">src=&quot;/refuse.svg&quot;</span><br><span class="line">class=&quot;w-16 cursor-pointer mr-4&quot;</span><br><span class="line">alt=&quot;&quot; /&gt;</span><br><span class="line">&lt;img</span><br><span class="line">@click=&quot;acceptCall&quot;</span><br><span class="line">src=&quot;/accept.svg&quot;</span><br><span class="line">class=&quot;w-16 cursor-pointer&quot;</span><br><span class="line">alt=&quot;&quot; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;flex gap-2 mb-4&quot;&gt;</span><br><span class="line">&lt;button</span><br><span class="line">class=&quot;rounded-md bg-indigo-600 px-4 py-2 text-sm font-semibold text-white&quot;</span><br><span class="line">@click=&quot;callRemote&quot;&gt;</span><br><span class="line">发起视频</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">&lt;button</span><br><span class="line">class=&quot;rounded-md bg-red-600 px-4 py-2 text-sm font-semibold text-white&quot;</span><br><span class="line">@click=&quot;hangUp&quot;&gt;</span><br><span class="line">挂断视频</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><code>main.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>style.css</code> 这里使用了 tailwind 的样式库</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br></pre></td></tr></table></figure><p><code>tailwind.config.js</code> 此配置文件中添加所有模板文件的路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">import(&#x27;tailwindcss&#x27;).Config</span>&#125; */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="attr">content</span>: [<span class="string">&#x27;./index.html&#x27;</span>, <span class="string">&#x27;./src/**/*.&#123;vue,js,ts,jsx,tsx&#125;&#x27;</span>],</span><br><span class="line"><span class="attr">theme</span>: &#123;</span><br><span class="line"><span class="attr">extend</span>: &#123;&#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">plugins</span>: [],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此前端页面绘制完成，可在 3000 端口可启动 node 服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm run start</span><br></pre></td></tr></table></figure><h3 id="webrtc-server"><a href="#webrtc-server" class="headerlink" title="webrtc-server"></a>webrtc-server</h3><p>初始化服务端项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm init</span><br></pre></td></tr></table></figure><p><code>socket.io</code> 封装了 websocket 应用创建服务</p><p><code>nodemon</code> 代码改变会自动重启(不用重复地开关)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install socket.io nodemon</span><br></pre></td></tr></table></figure><p><code>package.json</code> 添加<code>start</code>命令，使用<code>nodemon</code>启动项目</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodemon index.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>创建<code>index.js</code>（最初版，之后后端的所有操作都在这个文件上进行）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> socket = <span class="built_in">require</span>(<span class="string">&#x27;socket.io&#x27;</span>) <span class="comment">//封装了websocket应用创建服务</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>) <span class="comment">//引入http模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>() <span class="comment">//创建服务器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> io = <span class="title function_">socket</span>(server, &#123;</span><br><span class="line"><span class="attr">cors</span>: &#123;</span><br><span class="line"><span class="attr">origin</span>: <span class="string">&#x27;*&#x27;</span>, <span class="comment">// 配置跨域</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/////接下来的主体部分/////</span></span><br><span class="line">io.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="function">(<span class="params">sock</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接成功...&#x27;</span>)</span><br><span class="line">sock.<span class="title function_">emit</span>(<span class="string">&#x27;connectionSuccess&#x27;</span>) <span class="comment">// 向客户端发送连接成功的消息</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">io.<span class="title function_">on</span>(<span class="string">&#x27;disconnect&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接断开&#x27;</span>)</span><br><span class="line">sock.<span class="title function_">emit</span>(<span class="string">&#x27;connectionFalse&#x27;</span>) <span class="comment">// 向客户端发送连接断开的消息</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/////接下来的主体部分/////</span></span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器启动成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="插播-socket-重要概念"><a href="#插播-socket-重要概念" class="headerlink" title="!!!插播 socket 重要概念!!!"></a>!!!插播 socket 重要概念!!!</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.emit发送事件</span><br><span class="line">.on监听事件</span><br></pre></td></tr></table></figure><p>常见内置事件说明</p><table><thead><tr><th align="center">事件名称</th><th align="center">触发场景</th><th align="center">使用位置</th></tr></thead><tbody><tr><td align="center">connect</td><td align="center">客户端成功连接到服务端时</td><td align="center">客户端</td></tr><tr><td align="center">connection</td><td align="center">服务端接收到新客户端连接时</td><td align="center">服务端</td></tr><tr><td align="center">disconnect</td><td align="center">连接断开时</td><td align="center">客户端&#x2F;服务端</td></tr><tr><td align="center">error</td><td align="center">连接发生错误时</td><td align="center">客户端&#x2F;服务端</td></tr></tbody></table><p>后端至此搭建完成，可在 3000 端口可启动 node 服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm run start</span><br></pre></td></tr></table></figure><h2 id="前端连接信令服务器"><a href="#前端连接信令服务器" class="headerlink" title="前端连接信令服务器"></a>前端连接信令服务器</h2><p>依靠的就是<code>socket.io-client</code></p><p>接下来我们将在<code>App.vue</code>中开始编写脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, onMounted, onUnmounted &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; io, Socket &#125; from &#x27;socket.io-client&#x27;</span><br><span class="line"></span><br><span class="line">const socket = ref&lt;Socket&gt;() // 前端Socket实例</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">const sock = io(&#x27;localhost:3000&#x27;) // 通过 io(&#x27;localhost:3000&#x27;) 创建的 Socket.IO 客户端实例</span><br><span class="line"></span><br><span class="line">// 连接成功</span><br><span class="line">sock.on(&#x27;connectionSuccess&#x27;, () =&gt; &#123;</span><br><span class="line">console.log(&#x27;连接成功&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">socket.value = sock // 存储Socket实例</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>还记得吗，就在前两步，后端在连接成功后向前端.emit(发送)了 connectionSuccess 事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">io.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="function">(<span class="params">sock</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接成功...&#x27;</span>)</span><br><span class="line">sock.<span class="title function_">emit</span>(<span class="string">&#x27;connectionSuccess&#x27;</span>) <span class="comment">// 向客户端发送连接成功的消息</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>而在此时的前端加入的</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sock.<span class="title function_">on</span>(<span class="string">&#x27;connectionSuccess&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 接收到服务端发来的connectionSuccess(连接成功)事件</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>前后端交互正式开始</p><h2 id="发起视频请求"><a href="#发起视频请求" class="headerlink" title="发起视频请求"></a>发起视频请求</h2><h3 id="获取本地音视频流"><a href="#获取本地音视频流" class="headerlink" title="获取本地音视频流"></a>获取本地音视频流</h3><p>前端</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getLocalStream</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> stream = <span class="keyword">await</span> navigator.<span class="property">mediaDevices</span>.<span class="title function_">getUserMedia</span>(&#123;</span><br><span class="line"><span class="comment">// 获取音视频流</span></span><br><span class="line"><span class="attr">video</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">audio</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line">localVideo.<span class="property">value</span>!.<span class="property">srcObject</span> = stream <span class="comment">// 将媒体流设置到 video 标签上播放</span></span><br><span class="line">localVideo.<span class="property">value</span>!.<span class="title function_">play</span>() <span class="comment">// 播放音视频流</span></span><br><span class="line">localStream.<span class="property">value</span> = stream <span class="comment">// 存储本地流</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> stream</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="“房间”的概念"><a href="#“房间”的概念" class="headerlink" title="“房间”的概念"></a>“房间”的概念</h3><blockquote><p>不妨先停下来思考一下，为什么在同一个网页，不同的客户端可以看见不同的页面，和实时共享的内容</p></blockquote><img src="C:\Users\DELL\AppData\Roaming\Typora\typora-user-images\image-20250205190246032.png" alt="image-20250205190246032" style="zoom: 33%;" /><p>我们先来看一看之前给前端写的组件（layout 省略版）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;video ref=&quot;localVideo&quot;&gt;&lt;/video&gt;</span><br><span class="line">//本地视频</span><br><span class="line">&lt;video ref=&quot;remoteVideo&quot;&gt;&lt;/video&gt;</span><br><span class="line">//接收方视频（位于右下角）</span><br><span class="line"></span><br><span class="line">&lt;div v-if=&quot;caller &amp;&amp; calling&quot;&gt;//状态参数---caller:发送方---calling:呼叫中</span><br><span class="line">    &lt;p&gt;等待对方接听...&lt;/p&gt;</span><br><span class="line">    &lt;img @click=&quot;hangUp&quot; src=&quot;/refuse.svg&quot;/&gt;//挂断</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div v-if=&quot;called &amp;&amp; calling&quot;&gt;//状态参数---called:接收方---calling:呼叫中</span><br><span class="line">    &lt;p&gt;收到视频邀请...&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;img @click=&quot;hangUp&quot; src=&quot;/refuse.svg&quot;/&gt;//挂断</span><br><span class="line">    &lt;img @click=&quot;acceptCall&quot; src=&quot;/accept.svg&quot;/&gt;//接听</span><br><span class="line"></span><br><span class="line">    &lt;button @click=&quot;callRemote&quot;&gt;发起视频&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;hangUp&quot;&gt;挂断视频&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><blockquote><p>不难发现我们是依靠状态参数来控制页面显示的</p></blockquote><p>本项目参数表如下</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> called = ref&lt;<span class="built_in">boolean</span>&gt;(<span class="literal">false</span>) <span class="comment">// 是否是接收方</span></span><br><span class="line"><span class="keyword">const</span> caller = ref&lt;<span class="built_in">boolean</span>&gt;(<span class="literal">false</span>) <span class="comment">// 是否是发起方</span></span><br><span class="line"><span class="keyword">const</span> calling = ref&lt;<span class="built_in">boolean</span>&gt;(<span class="literal">false</span>) <span class="comment">// 呼叫中</span></span><br><span class="line"><span class="keyword">const</span> communicating = ref&lt;<span class="built_in">boolean</span>&gt;(<span class="literal">false</span>) <span class="comment">// 视频通话中</span></span><br><span class="line"><span class="keyword">const</span> localVideo = ref&lt;<span class="title class_">HTMLVideoElement</span>&gt;() <span class="comment">// video标签实例，播放本人的视频</span></span><br><span class="line"><span class="keyword">const</span> remoteVideo = ref&lt;<span class="title class_">HTMLVideoElement</span>&gt;() <span class="comment">// video标签实例，播放对方的视频</span></span><br><span class="line"><span class="keyword">const</span> localStream = ref&lt;<span class="title class_">MediaStream</span>&gt;() <span class="comment">// 本地流</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> roomId = <span class="string">&#x27;001&#x27;</span> <span class="comment">// 房间ID</span></span><br></pre></td></tr></table></figure><p>顺便带上实例创建</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> socket = ref&lt;<span class="title class_">Socket</span>&gt;() <span class="comment">// Socket实例</span></span><br><span class="line"><span class="keyword">const</span> peer = ref&lt;<span class="built_in">any</span>&gt;() <span class="comment">// RTCPeerConnection实例</span></span><br></pre></td></tr></table></figure><p>而对于我们这个项目，<code>房间</code>的概念就很简单</p><blockquote><p>A (左) 向 B (右) 发起接通请求，在 B 接收请求后，双方都将加入这个视频通话的”房间”</p><p>房间 可以通过自主分配 id 划分，每个房间也可以加入很多用户 (如直播系统)</p><p>服务端含有加入房间的操纵代码 sock.join(Id)</p></blockquote><h3 id="加入房间请求"><a href="#加入房间请求" class="headerlink" title="加入房间请求"></a>加入房间请求</h3><p>前端</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sock.<span class="title function_">on</span>(<span class="string">&#x27;connectionSuccess&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接服务器成功...&#x27;</span>)</span><br><span class="line">sock.<span class="title function_">emit</span>(<span class="string">&#x27;joinRoom&#x27;</span>, roomId) <span class="comment">// 前端发送加入房间事件</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>后端</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sock.<span class="title function_">on</span>(<span class="string">&#x27;joinRoom&#x27;</span>, <span class="function">(<span class="params">roomId</span>) =&gt;</span> &#123;</span><br><span class="line">sock.<span class="title function_">join</span>(roomId) <span class="comment">// 加入房间</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="发起视频请求-1"><a href="#发起视频请求-1" class="headerlink" title="发起视频请求"></a>发起视频请求</h3><p><strong>A 方按钮触发函数</strong></p><p>前端</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">callRemote</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发起视频&#x27;</span>) <span class="comment">// 状态更新</span></span><br><span class="line">caller.<span class="property">value</span> = <span class="literal">true</span> <span class="comment">// 发送方标记</span></span><br><span class="line">calling.<span class="property">value</span> = <span class="literal">true</span> <span class="comment">// 呼叫中</span></span><br><span class="line"><span class="keyword">await</span> <span class="title function_">getLocalStream</span>() <span class="comment">// 获取本地音视频流函数</span></span><br><span class="line">socket.<span class="property">value</span>?.<span class="title function_">emit</span>(<span class="string">&#x27;callRemote&#x27;</span>, roomId) <span class="comment">// 发送视频请求事件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后端</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sock.<span class="title function_">on</span>(<span class="string">&#x27;callRemote&#x27;</span>, <span class="function">(<span class="params">roomId</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 收到发送方的视频请求事件</span></span><br><span class="line">io.<span class="title function_">to</span>(roomId).<span class="title function_">emit</span>(<span class="string">&#x27;receiveCall&#x27;</span>) <span class="comment">// 向这个房间中的所有人广播事件receiveCall</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>前端</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sock.<span class="title function_">on</span>(<span class="string">&#x27;receiveCall&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 房间内所有接收方监听到视频请求事件</span></span><br><span class="line"><span class="keyword">if</span> (!caller.<span class="property">value</span>) &#123;</span><br><span class="line"><span class="comment">// 非发起方</span></span><br><span class="line">calling.<span class="property">value</span> = <span class="literal">true</span> <span class="comment">// 呼叫中</span></span><br><span class="line">called.<span class="property">value</span> = <span class="literal">true</span> <span class="comment">// 接收方标记</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>此时 A(发起)方启动摄像头和麦克风，并等待对方接听</p><p>B(接收)方出现 接听&#x2F;挂断 按钮</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-if=&quot;caller &amp;&amp; calling&quot;&gt;//状态参数---caller:发送方---calling:呼叫中</span><br><span class="line">    &lt;p&gt;等待对方接听...&lt;/p&gt;</span><br><span class="line">    &lt;img @click=&quot;hangUp&quot; src=&quot;/refuse.svg&quot;/&gt;//挂断</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div v-if=&quot;called &amp;&amp; calling&quot;&gt;//状态参数---called:接收方---calling:呼叫中</span><br><span class="line">    &lt;p&gt;收到视频邀请...&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;img @click=&quot;hangUp&quot; src=&quot;/refuse.svg&quot;/&gt;//挂断</span><br><span class="line">    &lt;img @click=&quot;acceptCall&quot; src=&quot;/accept.svg&quot;/&gt;//接听</span><br><span class="line"></span><br><span class="line">    &lt;button @click=&quot;callRemote&quot;&gt;发起视频&lt;/button&gt;//发起</span><br><span class="line">    &lt;button @click=&quot;hangUp&quot;&gt;挂断视频&lt;/button&gt;//挂断</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="接收-挂断-视频"><a href="#接收-挂断-视频" class="headerlink" title="接收 &#x2F; 挂断 视频"></a>接收 &#x2F; 挂断 视频</h3><p><strong><em>趁着现在，我们添上其他按钮绑定的函数</em></strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 挂断视频</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">hangUp</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">socket.<span class="property">value</span>.<span class="title function_">emit</span>(<span class="string">&#x27;hangUp&#x27;</span>, roomId)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接收视频请求（接收方）</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">acceptCall</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">socket.<span class="property">value</span>.<span class="title function_">emit</span>(<span class="string">&#x27;acceptCall&#x27;</span>, roomId)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>接着来看后端怎么处理</em></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 挂断视频</span></span><br><span class="line">sock.<span class="title function_">on</span>(<span class="string">&#x27;hangUp&#x27;</span>, <span class="function">(<span class="params">roomId</span>) =&gt;</span> &#123;</span><br><span class="line">io.<span class="title function_">to</span>(roomId).<span class="title function_">emit</span>(<span class="string">&#x27;hangUp&#x27;</span>) <span class="comment">// 向Id房间内所有人广播这个事件</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接收视频请求</span></span><br><span class="line">sock.<span class="title function_">on</span>(<span class="string">&#x27;acceptCall&#x27;</span>, <span class="function">(<span class="params">roomId</span>) =&gt;</span> &#123;</span><br><span class="line">io.<span class="title function_">to</span>(roomId).<span class="title function_">emit</span>(<span class="string">&#x27;acceptCall&#x27;</span>) <span class="comment">// 向Id房间内所有人广播这个事件</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong><em>返回前端，处理我们接收到的 hangUp || acceptCall</em></strong></p><p><strong>挂断视频</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sock.<span class="title function_">on</span>(<span class="string">&#x27;hangUp&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">reset</span>() <span class="comment">// 重置状态</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>重置状态函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">reset</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">called.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">caller.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">calling.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">communicating.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">peer.<span class="property">value</span> = <span class="literal">null</span></span><br><span class="line">localVideo.<span class="property">value</span>!.<span class="property">srcObject</span> = <span class="literal">null</span> <span class="comment">// 关闭本地视频</span></span><br><span class="line">remoteVideo.<span class="property">value</span>!.<span class="property">srcObject</span> = <span class="literal">null</span> <span class="comment">// 关闭远程视频</span></span><br><span class="line">localStream.<span class="property">value</span>?.<span class="title function_">getTracks</span>()[<span class="number">0</span>].<span class="title function_">stop</span>() <span class="comment">// 关闭本地流</span></span><br><span class="line"><span class="comment">// localStream.value = undefined // 关闭本地流（相同效果）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接受视频请求</strong></p><p>而这个就变复杂了</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">sock.<span class="title function_">on</span>(<span class="string">&#x27;acceptCall&#x27;</span>, <span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (caller.<span class="property">value</span>) &#123;</span><br><span class="line"><span class="comment">// 发送方</span></span><br><span class="line">peer.<span class="property">value</span> = <span class="keyword">new</span> <span class="title class_">RTCPeerConnection</span>() <span class="comment">// 创建RTCPeerConnection对象</span></span><br><span class="line">peer.<span class="property">value</span>.<span class="title function_">addStream</span>(localStream.<span class="property">value</span>) <span class="comment">// 添加本地音视频流</span></span><br><span class="line"></span><br><span class="line">peer.<span class="property">value</span>.<span class="property">onicecandidate</span> = <span class="function">(<span class="params"><span class="attr">event</span>: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 获取candidate信息</span></span><br><span class="line"><span class="keyword">if</span> (event.<span class="property">candidate</span>) &#123;</span><br><span class="line">sock.<span class="title function_">emit</span>(<span class="string">&#x27;sendCandidate&#x27;</span>, &#123; roomId, <span class="attr">candidate</span>: event.<span class="property">candidate</span> &#125;) <span class="comment">// 向服务器发送candidate信息</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取对方的音视频流</span></span><br><span class="line">peer.<span class="property">value</span>.<span class="property">onaddstream</span> = <span class="function">(<span class="params"><span class="attr">event</span>: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">calling.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">communicating.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment">// 拿到对方的视频流</span></span><br><span class="line">remoteVideo.<span class="property">value</span>!.<span class="property">srcObject</span> = event.<span class="property">stream</span></span><br><span class="line">remoteVideo.<span class="property">value</span>!.<span class="title function_">play</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 生成offer</span></span><br><span class="line"><span class="keyword">const</span> offer = <span class="keyword">await</span> peer.<span class="property">value</span>.<span class="title function_">createOffer</span>(&#123;</span><br><span class="line"><span class="attr">offerToReceiveAudio</span>: <span class="literal">true</span>, <span class="comment">// 是否接收对方的音频</span></span><br><span class="line"><span class="attr">offerToReceiveVideo</span>: <span class="literal">true</span>, <span class="comment">// 是否接收对方的视频</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">await</span> peer.<span class="property">value</span>.<span class="title function_">setLocalDescription</span>(offer) <span class="comment">// 设置本地描述的offer</span></span><br><span class="line">sock.<span class="title function_">emit</span>(<span class="string">&#x27;sendOffer&#x27;</span>, &#123; roomId, offer &#125;) <span class="comment">// 发送offer</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="交换-SDP-信息和-candidate-信息"><a href="#交换-SDP-信息和-candidate-信息" class="headerlink" title="交换 SDP 信息和 candidate 信息"></a>交换 SDP 信息和 candidate 信息</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong><em>SDP</em></strong> ：WebRTC 的一种协议，用于描述<strong>设备支持的媒体格式</strong></p><p><strong><em>candidate</em></strong> ：网络信息</p><p><strong>媒体协商</strong> ：交换 SDP</p><p><strong>ICE</strong> ：WebRTC 的通信机制</p><img src="C:\Users\DELL\Desktop\WebRTC资料\WebRTC\讲义\04.png" alt="04" style="zoom: 50%;" /><p>工作原理</p><blockquote><p>1.双方收集本地网络地址（分 共有 | 私有）+ STUN 和 TURN 服务器获取候选地址</p><p>2.双方通过信令服务器交换这些候选地址</p><p>3.双方使用候选地址进行连接测试，确定最佳的可用地址，开始实时音视频通话</p></blockquote><h3 id="媒体协商"><a href="#媒体协商" class="headerlink" title="媒体协商"></a>媒体协商</h3><p><strong>接下来是最重要的信令交换步骤（WebRTC 核心）</strong></p><p>主要用到以下方法</p><p>媒体协商</p><blockquote><p>createOffer</p><p>createAnswer</p><p>setLocalDesccription</p><p>setRemoteDesccription</p></blockquote><p>重要事件</p><blockquote><p>onicecandidate</p><p>onaddstream</p></blockquote><img src="C:\Users\DELL\AppData\Roaming\Typora\typora-user-images\image-20250113163924170.png" alt="image-20250113163924170" style="zoom:50%;" /><p>步骤流程重绘（可以对标号有个印象）</p><blockquote><p>预告：所有函数均在前端实现，后端起到向前端广播作用</p></blockquote><img src="E:\QQ缓存/IMG_20250205_220254.jpg" alt="IMG_20250205_220254" style="zoom: 25%;" /><p>紧接着接收方接收到对方同意的消息</p><h3 id="信息交换全程"><a href="#信息交换全程" class="headerlink" title="信息交换全程"></a>信息交换全程</h3><p>前端（发送方）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">sock.<span class="title function_">on</span>(<span class="string">&#x27;acceptCall&#x27;</span>, <span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (caller.<span class="property">value</span>) &#123;<span class="comment">// 发送方</span></span><br><span class="line">        peer.<span class="property">value</span> = <span class="keyword">new</span> <span class="title class_">RTCPeerConnection</span>()<span class="comment">// 创建RTCPeerConnection对象</span></span><br><span class="line">        peer.<span class="property">value</span>.<span class="title function_">addStream</span>(localStream.<span class="property">value</span>)<span class="comment">// 添加本地音视频流</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取candidate信息</span></span><br><span class="line">        peer.<span class="property">value</span>.<span class="property">onicecandidate</span> = <span class="function">(<span class="params"><span class="attr">event</span>: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (event.<span class="property">candidate</span>) &#123;</span><br><span class="line">                <span class="comment">// 向服务器发送candidate信息</span></span><br><span class="line">                sock.<span class="title function_">emit</span>(<span class="string">&#x27;sendCandidate&#x27;</span>, &#123; roomId, <span class="attr">candidate</span>: event.<span class="property">candidate</span> &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取对方的音视频流</span></span><br><span class="line">        peer.<span class="property">value</span>.<span class="property">onaddstream</span> = <span class="function">(<span class="params"><span class="attr">event</span>: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">            calling.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">            communicating.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">            <span class="comment">// 拿到对方的视频流</span></span><br><span class="line">            remoteVideo.<span class="property">value</span>!.<span class="property">srcObject</span> = event.<span class="property">stream</span></span><br><span class="line">            remoteVideo.<span class="property">value</span>!.<span class="title function_">play</span>()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ---①---</span><br><span class="line">        <span class="keyword">const</span> offer = <span class="keyword">await</span> peer.<span class="property">value</span>.<span class="title function_">createOffer</span>(&#123;<span class="comment">// 生成offer</span></span><br><span class="line">            <span class="attr">offerToReceiveAudio</span>: <span class="literal">true</span>, <span class="comment">// 是否接收对方的音频</span></span><br><span class="line">            <span class="attr">offerToReceiveVideo</span>: <span class="literal">true</span>, <span class="comment">// 是否接收对方的视频</span></span><br><span class="line">        &#125;)</span><br><span class="line">        ---②---</span><br><span class="line">        <span class="keyword">await</span> peer.<span class="property">value</span>.<span class="title function_">setLocalDescription</span>(offer)<span class="comment">// 设置本地描述的offer</span></span><br><span class="line">        ---③---</span><br><span class="line">        sock.<span class="title function_">emit</span>(<span class="string">&#x27;sendOffer&#x27;</span>, &#123; roomId, offer &#125;)<span class="comment">// 发送offer !!!注意,这里offer已经当参数传过去了!!!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>后端</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sock.<span class="title function_">on</span>(<span class="string">&#x27;sendCandidate&#x27;</span>, <span class="function">(<span class="params">&#123; roomId, candidate &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">io.<span class="title function_">to</span>(roomId).<span class="title function_">emit</span>(<span class="string">&#x27;receiveCandidate&#x27;</span>, candidate) <span class="comment">// 向这个房间里所有人广播candidate信息</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sock.<span class="title function_">on</span>(<span class="string">&#x27;sendOffer&#x27;</span>, <span class="function">(<span class="params">&#123; roomId, offer &#125;</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// !!!offer在这里!!!</span></span><br><span class="line">io.<span class="title function_">to</span>(roomId).<span class="title function_">emit</span>(<span class="string">&#x27;sendOffer&#x27;</span>, offer) <span class="comment">// 向这个房间里所有人广播offer信息 &amp;&amp; 向接收方发送这个offer</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>前端（接收方）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">sock.<span class="title function_">on</span>(<span class="string">&#x27;sendOffer&#x27;</span>, <span class="title function_">async</span> (<span class="attr">offer</span>: <span class="built_in">any</span>) =&gt; &#123;<span class="comment">// !!!offer传回前端(判断被标注的接收方)!!!</span></span><br><span class="line">    <span class="keyword">if</span> (called.<span class="property">value</span>) &#123;<span class="comment">// 接收方</span></span><br><span class="line">        <span class="keyword">const</span> stream = <span class="keyword">await</span> <span class="title function_">getLocalStream</span>()<span class="comment">// 获取本地音视频流</span></span><br><span class="line">        peer.<span class="property">value</span> = <span class="keyword">new</span> <span class="title class_">RTCPeerConnection</span>()<span class="comment">// 接收方创建自己的RTCPeerConnection对象</span></span><br><span class="line">        peer.<span class="property">value</span>.<span class="title function_">addStream</span>(stream)<span class="comment">// 添加本地音视频流</span></span><br><span class="line"></span><br><span class="line">        peer.<span class="property">value</span>.<span class="property">onicecandidate</span> = <span class="function">(<span class="params"><span class="attr">event</span>: <span class="built_in">any</span></span>) =&gt;</span> &#123;<span class="comment">// 获取candidate信息</span></span><br><span class="line">            <span class="keyword">if</span> (event.<span class="property">candidate</span>) &#123;</span><br><span class="line">                <span class="comment">// 向服务器发送candidate信息</span></span><br><span class="line">                sock.<span class="title function_">emit</span>(<span class="string">&#x27;sendCandidate&#x27;</span>, &#123; roomId, <span class="attr">candidate</span>: event.<span class="property">candidate</span> &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取对方的音视频流</span></span><br><span class="line">        peer.<span class="property">value</span>.<span class="property">onaddstream</span> = <span class="function">(<span class="params"><span class="attr">event</span>: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">            calling.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">            communicating.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">            <span class="comment">// 拿到对方的视频流</span></span><br><span class="line">            remoteVideo.<span class="property">value</span>!.<span class="property">srcObject</span> = event.<span class="property">stream</span></span><br><span class="line">            remoteVideo.<span class="property">value</span>!.<span class="title function_">play</span>()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ---④---</span><br><span class="line">        <span class="keyword">await</span> peer.<span class="property">value</span>.<span class="title function_">setRemoteDescription</span>(offer)<span class="comment">// 设置远端描述信息</span></span><br><span class="line"></span><br><span class="line">        ---⑤---</span><br><span class="line">        <span class="keyword">const</span> answer = <span class="keyword">await</span> peer.<span class="property">value</span>.<span class="title function_">createAnswer</span>()<span class="comment">// 生成answer</span></span><br><span class="line">        ---⑥---</span><br><span class="line">        <span class="keyword">await</span> peer.<span class="property">value</span>.<span class="title function_">setLocalDescription</span>(answer)<span class="comment">// 设置本地描述信息</span></span><br><span class="line">        ---⑦---</span><br><span class="line">        sock.<span class="title function_">emit</span>(<span class="string">&#x27;sendAnswer&#x27;</span>, &#123; roomId, answer &#125;)<span class="comment">// 发送answer !!!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>后端</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sock.<span class="title function_">on</span>(<span class="string">&#x27;sendCandidate&#x27;</span>, <span class="function">(<span class="params">&#123; roomId, candidate &#125;</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// !!!</span></span><br><span class="line">io.<span class="title function_">to</span>(roomId).<span class="title function_">emit</span>(<span class="string">&#x27;receiveCandidate&#x27;</span>, candidate) <span class="comment">// 向这个房间里所有人广播candidate信息</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sock.<span class="title function_">on</span>(<span class="string">&#x27;sendAnswer&#x27;</span>, <span class="function">(<span class="params">&#123; roomId, answer &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">io.<span class="title function_">to</span>(roomId).<span class="title function_">emit</span>(<span class="string">&#x27;receiveAnswer&#x27;</span>, answer) <span class="comment">// 向这个房间里所有人广播answer信息 &amp;&amp; 向接收方发送这个answer</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>前端</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sock.<span class="title function_">on</span>(<span class="string">&#x27;receiveAnswer&#x27;</span>, <span class="function">(<span class="params"><span class="attr">answer</span>: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (caller.<span class="property">value</span>) &#123;<span class="comment">// 发送方</span></span><br><span class="line">        ---⑧---</span><br><span class="line">        peer.<span class="property">value</span>.<span class="title function_">setRemoteDescription</span>(answer)<span class="comment">// 设置远端描述信息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>为了让文章不那么乱，最后再补一下<em>candidate</em></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sock.<span class="title function_">on</span>(<span class="string">&#x27;receiveCandidate&#x27;</span>, <span class="title function_">async</span> (<span class="attr">candidate</span>: <span class="built_in">any</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">await</span> peer.<span class="property">value</span>.<span class="title function_">addIceCandidate</span>(candidate) <span class="comment">// 添加candidate信息</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>一路下来是不是逻辑非常清晰明了 😁 (bushi)</p></blockquote><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>前端 (App.vue)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; io, <span class="title class_">Socket</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;socket.io-client&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> roomId = <span class="string">&#x27;001&#x27;</span> <span class="comment">// 房间ID</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> called = ref&lt;<span class="built_in">boolean</span>&gt;(<span class="literal">false</span>) <span class="comment">// 是否是接收方</span></span><br><span class="line"><span class="keyword">const</span> caller = ref&lt;<span class="built_in">boolean</span>&gt;(<span class="literal">false</span>) <span class="comment">// 是否是发起方</span></span><br><span class="line"><span class="keyword">const</span> calling = ref&lt;<span class="built_in">boolean</span>&gt;(<span class="literal">false</span>) <span class="comment">// 呼叫中</span></span><br><span class="line"><span class="keyword">const</span> communicating = ref&lt;<span class="built_in">boolean</span>&gt;(<span class="literal">false</span>) <span class="comment">// 视频通话中</span></span><br><span class="line"><span class="keyword">const</span> localVideo = ref&lt;<span class="title class_">HTMLVideoElement</span>&gt;() <span class="comment">// video标签实例，播放本人的视频</span></span><br><span class="line"><span class="keyword">const</span> remoteVideo = ref&lt;<span class="title class_">HTMLVideoElement</span>&gt;() <span class="comment">// video标签实例，播放对方的视频</span></span><br><span class="line"><span class="keyword">const</span> localStream = ref&lt;<span class="title class_">MediaStream</span>&gt;() <span class="comment">// 本地流</span></span><br><span class="line"><span class="keyword">const</span> socket = ref&lt;<span class="title class_">Socket</span>&gt;() <span class="comment">// Socket实例</span></span><br><span class="line"><span class="keyword">const</span> peer = ref&lt;<span class="built_in">any</span>&gt;() <span class="comment">// RTCPeerConnection实例</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> sock = <span class="title function_">io</span>(<span class="string">&#x27;localhost:3001&#x27;</span>) <span class="comment">// 连接服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接成功</span></span><br><span class="line">sock.<span class="title function_">on</span>(<span class="string">&#x27;connectionSuccess&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 进入房间</span></span><br><span class="line">sock.<span class="title function_">emit</span>(<span class="string">&#x27;joinRoom&#x27;</span>, roomId)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收方监听收到视频请求事件</span></span><br><span class="line">sock.<span class="title function_">on</span>(<span class="string">&#x27;receiveCall&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!caller.<span class="property">value</span>) &#123;</span><br><span class="line">calling.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">called.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送方收到同意视频事件</span></span><br><span class="line">sock.<span class="title function_">on</span>(<span class="string">&#x27;acceptCall&#x27;</span>, <span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (caller.<span class="property">value</span>) &#123;</span><br><span class="line"><span class="comment">// 发送方</span></span><br><span class="line"><span class="comment">// 创建RTCPeerConnection对象</span></span><br><span class="line">peer.<span class="property">value</span> = <span class="keyword">new</span> <span class="title class_">RTCPeerConnection</span>()</span><br><span class="line"><span class="comment">// 添加本地音视频流</span></span><br><span class="line">peer.<span class="property">value</span>.<span class="title function_">addStream</span>(localStream.<span class="property">value</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取candidate信息</span></span><br><span class="line">peer.<span class="property">value</span>.<span class="property">onicecandidate</span> = <span class="function">(<span class="params"><span class="attr">event</span>: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (event.<span class="property">candidate</span>) &#123;</span><br><span class="line"><span class="comment">// 向服务器发送candidate信息</span></span><br><span class="line">sock.<span class="title function_">emit</span>(<span class="string">&#x27;sendCandidate&#x27;</span>, &#123; roomId, <span class="attr">candidate</span>: event.<span class="property">candidate</span> &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取对方的音视频流</span></span><br><span class="line">peer.<span class="property">value</span>.<span class="property">onaddstream</span> = <span class="function">(<span class="params"><span class="attr">event</span>: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">calling.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">communicating.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment">// 拿到对方的视频流</span></span><br><span class="line">remoteVideo.<span class="property">value</span>!.<span class="property">srcObject</span> = event.<span class="property">stream</span></span><br><span class="line">remoteVideo.<span class="property">value</span>!.<span class="title function_">play</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成offer</span></span><br><span class="line"><span class="keyword">const</span> offer = <span class="keyword">await</span> peer.<span class="property">value</span>.<span class="title function_">createOffer</span>(&#123;</span><br><span class="line"><span class="attr">offerToReceiveAudio</span>: <span class="literal">true</span>, <span class="comment">// 是否接收对方的音频</span></span><br><span class="line"><span class="attr">offerToReceiveVideo</span>: <span class="literal">true</span>, <span class="comment">// 是否接收对方的视频</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 设置本地描述的offer</span></span><br><span class="line"><span class="keyword">await</span> peer.<span class="property">value</span>.<span class="title function_">setLocalDescription</span>(offer)</span><br><span class="line"><span class="comment">// 发送offer</span></span><br><span class="line">sock.<span class="title function_">emit</span>(<span class="string">&#x27;sendOffer&#x27;</span>, &#123; roomId, offer &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收方收到offer</span></span><br><span class="line">sock.<span class="title function_">on</span>(<span class="string">&#x27;sendOffer&#x27;</span>, <span class="title function_">async</span> (<span class="attr">offer</span>: <span class="built_in">any</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (called.<span class="property">value</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> stream = <span class="keyword">await</span> <span class="title function_">getLocalStream</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收方创建自己的RTCPeerConnection对象</span></span><br><span class="line">peer.<span class="property">value</span> = <span class="keyword">new</span> <span class="title class_">RTCPeerConnection</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加本地音视频流</span></span><br><span class="line">peer.<span class="property">value</span>.<span class="title function_">addStream</span>(stream)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取candidate信息</span></span><br><span class="line">peer.<span class="property">value</span>.<span class="property">onicecandidate</span> = <span class="function">(<span class="params"><span class="attr">event</span>: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (event.<span class="property">candidate</span>) &#123;</span><br><span class="line"><span class="comment">// 向服务器发送candidate信息</span></span><br><span class="line">sock.<span class="title function_">emit</span>(<span class="string">&#x27;sendCandidate&#x27;</span>, &#123; roomId, <span class="attr">candidate</span>: event.<span class="property">candidate</span> &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取对方的音视频流</span></span><br><span class="line">peer.<span class="property">value</span>.<span class="property">onaddstream</span> = <span class="function">(<span class="params"><span class="attr">event</span>: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 拿到对方的视频流</span></span><br><span class="line">calling.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">communicating.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">remoteVideo.<span class="property">value</span>!.<span class="property">srcObject</span> = event.<span class="property">stream</span></span><br><span class="line">remoteVideo.<span class="property">value</span>!.<span class="title function_">play</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置远端描述信息</span></span><br><span class="line"><span class="keyword">await</span> peer.<span class="property">value</span>.<span class="title function_">setRemoteDescription</span>(offer)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成answer</span></span><br><span class="line"><span class="keyword">const</span> answer = <span class="keyword">await</span> peer.<span class="property">value</span>.<span class="title function_">createAnswer</span>()</span><br><span class="line"><span class="comment">// 设置本地描述信息</span></span><br><span class="line"><span class="keyword">await</span> peer.<span class="property">value</span>.<span class="title function_">setLocalDescription</span>(answer)</span><br><span class="line"><span class="comment">// 发送answer</span></span><br><span class="line">sock.<span class="title function_">emit</span>(<span class="string">&#x27;sendAnswer&#x27;</span>, &#123; roomId, answer &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送方收到接收方的answer</span></span><br><span class="line">sock.<span class="title function_">on</span>(<span class="string">&#x27;receiveAnswer&#x27;</span>, <span class="function">(<span class="params"><span class="attr">answer</span>: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (caller.<span class="property">value</span>) &#123;</span><br><span class="line"><span class="comment">// 设置远端描述信息</span></span><br><span class="line">peer.<span class="property">value</span>.<span class="title function_">setRemoteDescription</span>(answer)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收candidate信息</span></span><br><span class="line">sock.<span class="title function_">on</span>(<span class="string">&#x27;receiveCandidate&#x27;</span>, <span class="title function_">async</span> (<span class="attr">candidate</span>: <span class="built_in">any</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">await</span> peer.<span class="property">value</span>.<span class="title function_">addIceCandidate</span>(candidate) <span class="comment">// 添加candidate信息</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 收到挂断视频请求</span></span><br><span class="line">sock.<span class="title function_">on</span>(<span class="string">&#x27;hangUp&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">reset</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">socket.<span class="property">value</span> = sock</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取本地音视频流</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getLocalStream</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"><span class="comment">// 获取音视频流</span></span><br><span class="line"><span class="keyword">const</span> stream = <span class="keyword">await</span> navigator.<span class="property">mediaDevices</span>.<span class="title function_">getUserMedia</span>(&#123;</span><br><span class="line"><span class="attr">video</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">audio</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 将媒体流设置到 video 标签上播放</span></span><br><span class="line">localVideo.<span class="property">value</span>!.<span class="property">srcObject</span> = stream</span><br><span class="line"><span class="comment">// 播放音视频流</span></span><br><span class="line">localVideo.<span class="property">value</span>!.<span class="title function_">play</span>()</span><br><span class="line"><span class="comment">// 存储本地流</span></span><br><span class="line">localStream.<span class="property">value</span> = stream</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> stream</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发起视频请求（发起方）</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">callRemote</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (calling.<span class="property">value</span> || communicating.<span class="property">value</span>) &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">calling.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment">// 获取本地音视频流</span></span><br><span class="line"><span class="keyword">await</span> <span class="title function_">getLocalStream</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向服务器发送发起视频请求的事件</span></span><br><span class="line">caller.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">socket.<span class="property">value</span>.<span class="title function_">emit</span>(<span class="string">&#x27;callRemote&#x27;</span>, roomId)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收视频请求（接受方）</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">acceptCall</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"><span class="comment">// 向服务器发送接受视频请求的事件</span></span><br><span class="line">socket.<span class="property">value</span>.<span class="title function_">emit</span>(<span class="string">&#x27;acceptCall&#x27;</span>, roomId)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂断视频</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">hangUp</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">socket.<span class="property">value</span>.<span class="title function_">emit</span>(<span class="string">&#x27;hangUp&#x27;</span>, roomId)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 状态重置</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reset</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">called.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">caller.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">calling.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">communicating.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">peer.<span class="property">value</span> = <span class="literal">null</span></span><br><span class="line">localVideo.<span class="property">value</span>!.<span class="property">srcObject</span> = <span class="literal">null</span> <span class="comment">// 关闭本地视频</span></span><br><span class="line">remoteVideo.<span class="property">value</span>!.<span class="property">srcObject</span> = <span class="literal">null</span> <span class="comment">// 关闭远程视频</span></span><br><span class="line">localStream.<span class="property">value</span>?.<span class="title function_">getTracks</span>()[<span class="number">0</span>].<span class="title function_">stop</span>() <span class="comment">// 关闭本地流</span></span><br><span class="line"><span class="comment">// localStream.value = undefined // 关闭本地流</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后端 (index.js)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> socket = <span class="built_in">require</span>(<span class="string">&#x27;socket.io&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> io = <span class="title function_">socket</span>(server, &#123;</span><br><span class="line"><span class="attr">cors</span>: &#123;</span><br><span class="line"><span class="attr">origin</span>: <span class="string">&#x27;*&#x27;</span>, <span class="comment">// 配置跨域</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">io.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="function">(<span class="params">sock</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接成功...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向客户端发送连接成功的消息</span></span><br><span class="line">sock.<span class="title function_">emit</span>(<span class="string">&#x27;connectionSuccess&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听客户端进入房间的事件</span></span><br><span class="line">sock.<span class="title function_">on</span>(<span class="string">&#x27;joinRoom&#x27;</span>, <span class="function">(<span class="params">roomId</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 加入房间</span></span><br><span class="line">sock.<span class="title function_">join</span>(roomId)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 收到发送方的视频请求事件</span></span><br><span class="line">sock.<span class="title function_">on</span>(<span class="string">&#x27;callRemote&#x27;</span>, <span class="function">(<span class="params">roomId</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 向这个房间中的人广播这个事件</span></span><br><span class="line">io.<span class="title function_">to</span>(roomId).<span class="title function_">emit</span>(<span class="string">&#x27;receiveCall&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 收到接收方的同意视频事件</span></span><br><span class="line">sock.<span class="title function_">on</span>(<span class="string">&#x27;acceptCall&#x27;</span>, <span class="function">(<span class="params">roomId</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 向这个房间中的人广播这个事件</span></span><br><span class="line">io.<span class="title function_">to</span>(roomId).<span class="title function_">emit</span>(<span class="string">&#x27;acceptCall&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 收到发送方的offer</span></span><br><span class="line">sock.<span class="title function_">on</span>(<span class="string">&#x27;sendOffer&#x27;</span>, <span class="function">(<span class="params">&#123; roomId, offer &#125;</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 向接收方发送这个offer</span></span><br><span class="line">io.<span class="title function_">to</span>(roomId).<span class="title function_">emit</span>(<span class="string">&#x27;sendOffer&#x27;</span>, offer)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 收到接收方的answer</span></span><br><span class="line">sock.<span class="title function_">on</span>(<span class="string">&#x27;sendAnswer&#x27;</span>, <span class="function">(<span class="params">&#123; roomId, answer &#125;</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 向这个房间中的人广播这个事件</span></span><br><span class="line">io.<span class="title function_">to</span>(roomId).<span class="title function_">emit</span>(<span class="string">&#x27;receiveAnswer&#x27;</span>, answer)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 收到发送方的candidate信息</span></span><br><span class="line">sock.<span class="title function_">on</span>(<span class="string">&#x27;sendCandidate&#x27;</span>, <span class="function">(<span class="params">&#123; roomId, candidate &#125;</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 向这个房间中的人广播candidate信息</span></span><br><span class="line">io.<span class="title function_">to</span>(roomId).<span class="title function_">emit</span>(<span class="string">&#x27;receiveCandidate&#x27;</span>, candidate)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 收到挂断视频请求</span></span><br><span class="line">sock.<span class="title function_">on</span>(<span class="string">&#x27;hangUp&#x27;</span>, <span class="function">(<span class="params">roomId</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 向这个房间中的人广播这个事件</span></span><br><span class="line">io.<span class="title function_">to</span>(roomId).<span class="title function_">emit</span>(<span class="string">&#x27;hangUp&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3001</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器启动成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="项目启动方式"><a href="#项目启动方式" class="headerlink" title="项目启动方式"></a>项目启动方式</h2><p>后端启动服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm start</span><br></pre></td></tr></table></figure><p>前端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pnpm install</span><br><span class="line">pnpm run dev</span><br></pre></td></tr></table></figure><h1 id="WebSocket-NestJS-升级项目-支持不同网络下视频通话"><a href="#WebSocket-NestJS-升级项目-支持不同网络下视频通话" class="headerlink" title="WebSocket+NestJS 升级项目 | 支持不同网络下视频通话"></a>WebSocket+NestJS 升级项目 | 支持不同网络下视频通话</h1><h2 id="项目架构重构"><a href="#项目架构重构" class="headerlink" title="项目架构重构"></a>项目架构重构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">├── webrtc-client/       # Vue 前端</span><br><span class="line">│   ├── src/</span><br><span class="line">│   │   ├── App.vue      # 主界面</span><br><span class="line">│   │   └── webrtc.ts    # WebRTC 核心逻辑(从App.vue分离出来)</span><br><span class="line">├── webrtc-server/       # NestJS 后端</span><br><span class="line">│   ├── src/</span><br><span class="line">│   │   ├── signaling/   # 信令服务器模块</span><br><span class="line">│   │   └── main.ts      # 入口文件</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深入前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TS + NodeJS实现axios</title>
      <link href="/2025/03/04/%E6%B7%B1%E5%85%A5%E5%89%8D%E7%AB%AF/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0axios/"/>
      <url>/2025/03/04/%E6%B7%B1%E5%85%A5%E5%89%8D%E7%AB%AF/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0axios/</url>
      
        <content type="html"><![CDATA[<h1 id="TS-NodeJS-实现-axios"><a href="#TS-NodeJS-实现-axios" class="headerlink" title="TS + NodeJS 实现 axios"></a>TS + NodeJS 实现 axios</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/alexjoverm/typescript-library-starter.git ts-axios</span><br></pre></td></tr></table></figure><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><blockquote><p>在浏览器端使用 XMLHttpRequest 对象通讯</p><p>Promise API</p><p>请求响应拦截器</p><p>请求数据和响应数据转换</p><p>请求的取消</p><p>JSON 数据的自动转换</p><p>客户端防止 XSRF</p></blockquote><p>框架工具</p><img src="C:\Users\DELL\AppData\Roaming\Typora\typora-user-images\image-20250129205459495.png" alt="image-20250129205459495" style="zoom:67%;" /><img src="C:\Users\DELL\AppData\Roaming\Typora\typora-user-images\image-20250129205721267.png" alt="image-20250129205721267" style="zoom:67%;" /><img src="C:\Users\DELL\AppData\Roaming\Typora\typora-user-images\image-20250129205345604.png" alt="image-20250129205345604" style="zoom:80%;" /><h3 id="请求代码"><a href="#请求代码" class="headerlink" title="请求代码"></a>请求代码</h3><p>axios 最基本的操作</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line"><span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;/simple/get&#x27;</span>,</span><br><span class="line"><span class="attr">params</span>: &#123;</span><br><span class="line"><span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>创建入口文件</p><p><code>index.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">axios</span>(<span class="params">config</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios</span><br></pre></td></tr></table></figure><p><code>xhr.ts</code></p><blockquote><p><code>xhr</code> 函数用于发送 HTTP 请求的工具函数，基于 XMLHttpRequest API 实现，并提供了一个简单的接口来配置和发送请求。</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AxiosRequestConfig</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">xhr</span>(<span class="params"><span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span></span>) &#123;</span><br><span class="line"><span class="keyword">const</span> &#123; data = <span class="literal">null</span>, url, method = <span class="string">&#x27;get&#x27;</span> &#125; = config <span class="comment">// 解构设置默认值</span></span><br><span class="line"><span class="keyword">const</span> request = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>() <span class="comment">// 实例化一个 XMLHttpRequest 对象 并赋值给 request 变量</span></span><br><span class="line">request.<span class="title function_">open</span>(method.<span class="title function_">toUpperCase</span>(), url, <span class="literal">true</span>) <span class="comment">// 调用 open 方法 并传入 method url true 三个参数 并将 method 转换为大写并赋值给 method,url. async:true</span></span><br><span class="line">request.<span class="title function_">send</span>(data) <span class="comment">// 调用 send 方法 并传入 data 参数 并赋值给 request 变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p><img src="C:\Users\DELL\AppData\Roaming\Typora\typora-user-images\image-20250130164413743.png" alt="image-20250130164413743"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="webpack-配置"><a href="#webpack-配置" class="headerlink" title="webpack 配置"></a>webpack 配置</h2><blockquote><p>webpack.config.js</p><p>整体导出一个对象，包含 mode（开发模式），entry，output，module，resolve，plugins 几个关键属性</p></blockquote><h3 id="entry"><a href="#entry" class="headerlink" title="entry"></a><em>entry</em></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">entry</span>: fs.<span class="title function_">readdirSync</span>(__dirname).<span class="title function_">reduce</span>(<span class="function">(<span class="params">entries, dir</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fullDir = path.<span class="title function_">join</span>(__dirname, dir)</span><br><span class="line">    <span class="keyword">const</span> entry = path.<span class="title function_">join</span>(fullDir, <span class="string">&#x27;app.ts&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (fs.<span class="title function_">statSync</span>(fullDir).<span class="title function_">isDirectory</span>() &amp;&amp; fs.<span class="title function_">existsSync</span>(entry)) &#123;</span><br><span class="line">        entries[dir] = [<span class="string">&#x27;webpack-hot-middleware/client&#x27;</span>, entry]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> entries</span><br><span class="line">&#125;, &#123;&#125;),</span><br></pre></td></tr></table></figure><blockquote><p>entries 收集了多个目录的入口文件 (app.ts) ，并将每个入口引入一个用于热更新的文件</p><p>entries 是一个对象，key 为目录名</p></blockquote><h3 id="output"><a href="#output" class="headerlink" title="output"></a><em>output</em></h3><blockquote><p>将 entries 的 key 打包成 filename</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;__build__&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&#x27;/__build__/&#x27;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="module"><a href="#module" class="headerlink" title="module"></a><em>module</em></h3><blockquote><p>rules 定义一系列处理不同类型文件的规则</p><p>.ts :<code>tslint-loader</code> 进行预处理 (包括类型检查)</p><p>.tsx :<code>transpileOnly: true</code> 只进行编译而不进行类型检查</p><p>.css :<code>style-loader</code> 将 CSS 注入到 DOM 中，<code>css-loader</code> 处理 CSS 文件中的 <code>@import</code> 和 <code>url()</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">            <span class="attr">enforce</span>: <span class="string">&#x27;pre&#x27;</span>,</span><br><span class="line">            <span class="attr">use</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;tslint-loader&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.tsx?$/</span>,</span><br><span class="line">            <span class="attr">use</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;ts-loader&#x27;</span>,</span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line">                        <span class="attr">transpileOnly</span>: <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a><em>resolve</em></h3><blockquote><p>指定在导入模块时可以省略的文件扩展名，Webpack 会自动尝试这些扩展名。</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resolve</span>: &#123;</span><br><span class="line"><span class="attr">extensions</span>: [<span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.tsx&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a><em>plugins</em></h3><blockquote><p>热更新 | 发生错误不打包文件</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line"><span class="keyword">new</span> webpack.<span class="title class_">HotModuleReplacementPlugin</span>(),</span><br><span class="line"><span class="keyword">new</span> webpack.<span class="title class_">NoEmitOnErrorsPlugin</span>(),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h2><h3 id="处理-url-参数-params"><a href="#处理-url-参数-params" class="headerlink" title="处理 url 参数(params)"></a>处理 url 参数(params)</h3><blockquote><p>核心思想：把 params 的 key&amp;value <strong>解构拼接</strong>到 URL 上</p></blockquote><img src="C:\Users\DELL\AppData\Roaming\Typora\typora-user-images\image-20250210214938544.png" alt="image-20250210214938544" style="zoom: 50%;" /><p><code>helpers/url.ts</code></p><h4 id="解构-URL-params"><a href="#解构-URL-params" class="headerlink" title="解构 URL -&gt; params"></a>解构 URL -&gt; params</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">bulidURL</span>(<span class="params"><span class="attr">url</span>: <span class="built_in">string</span>, <span class="attr">params</span>?: <span class="built_in">any</span></span>): <span class="built_in">string</span> &#123;<span class="comment">//解构</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> url</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>需处理逻辑</strong></p><p><em>没有参数</em></p><img src="C:\Users\DELL\AppData\Roaming\Typora\typora-user-images\image-20250210215202014.png" alt="image-20250210215202014" style="zoom:50%;" /><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!params) &#123;</span><br><span class="line"><span class="comment">// 没有参数 直接返回 url</span></span><br><span class="line"><span class="keyword">return</span> url</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解构-params-key-value"><a href="#解构-params-key-value" class="headerlink" title="解构 params -&gt; key&#x2F;value"></a>解构 params -&gt; key&#x2F;value</h4><p>params 是一个包含请求参数的对象</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例</span></span><br><span class="line"><span class="keyword">const</span> params = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line"><span class="attr">hobbies</span>: [<span class="string">&#x27;reading&#x27;</span>, <span class="string">&#x27;coding&#x27;</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体代码</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">parts</span>: <span class="built_in">string</span>[] = [] <span class="comment">// 存放参数的数组</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(params).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123; <span class="comment">// key 依次取到 &#x27;name&#x27;, &#x27;age&#x27;, &#x27;hobbies&#x27; 等值</span></span><br><span class="line">    <span class="keyword">const</span> val = params[key] <span class="comment">// 对象key值所对应的value</span></span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><em>value 为 null 或 undefined</em></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (val === <span class="literal">null</span> || <span class="keyword">typeof</span> val === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>value</em> 为 <em>数组</em></p><img src="C:\Users\DELL\AppData\Roaming\Typora\typora-user-images\image-20250210214959177.png" alt="image-20250210214959177" style="zoom:50%;" /><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> values = [] <span class="comment">// 定义 values 变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(val)) &#123;</span><br><span class="line"><span class="comment">// 如果 value 为数组 直接赋值给 values</span></span><br><span class="line">values = val</span><br><span class="line">key += <span class="string">&#x27;[]&#x27;</span> <span class="comment">// 键名后面添加一个 []</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">values = [val] <span class="comment">// 赋值给 values</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>value</em> 为 <em>Data</em> | <em>字符串</em> | <em>对象</em></p><img src="C:\Users\DELL\AppData\Roaming\Typora\typora-user-images\image-20250210215112025.png" alt="image-20250210215112025" style="zoom:50%;" /><img src="C:\Users\DELL\AppData\Roaming\Typora\typora-user-images\image-20250210215135428.png" alt="image-20250210215135428" style="zoom:50%;" /><img src="C:\Users\DELL\AppData\Roaming\Typora\typora-user-images\image-20250210215027145.png" alt="image-20250210215027145" style="zoom:50%;" /><p>helpers&#x2F;util.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> toString = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isDate</span>(<span class="params"><span class="attr">val</span>: <span class="built_in">any</span></span>): val is <span class="title class_">Date</span> &#123;</span><br><span class="line"><span class="keyword">return</span> toString.<span class="title function_">call</span>(val) === <span class="string">&#x27;[object Date]&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isObject</span>(<span class="params"><span class="attr">val</span>: <span class="built_in">any</span></span>): val is <span class="title class_">Object</span> &#123;</span><br><span class="line"><span class="keyword">return</span> val !== <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> val === <span class="string">&#x27;object&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再回来</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; isDate, isObject &#125; <span class="keyword">from</span> <span class="string">&#x27;./util&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">encode</span>(<span class="params"><span class="attr">val</span>: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">encodeURIComponent</span>(val)</span><br><span class="line">.<span class="title function_">replace</span>(<span class="regexp">/%40/g</span>, <span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">.<span class="title function_">replace</span>(<span class="regexp">/%3A/gi</span>, <span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">.<span class="title function_">replace</span>(<span class="regexp">/%24/g</span>, <span class="string">&#x27;$&#x27;</span>)</span><br><span class="line">.<span class="title function_">replace</span>(<span class="regexp">/%2C/gi</span>, <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">.<span class="title function_">replace</span>(<span class="regexp">/%20/g</span>, <span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">.<span class="title function_">replace</span>(<span class="regexp">/%5B/gi</span>, <span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">.<span class="title function_">replace</span>(<span class="regexp">/%5D/gi</span>, <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">values.<span class="title function_">forEach</span>(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 遍历 values</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">isDate</span>(val)) &#123;</span><br><span class="line"><span class="comment">// value 为日期</span></span><br><span class="line">val = val.<span class="title function_">toISOString</span>() <span class="comment">// 转换为 ISO 格式赋值给 val</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isObject</span>(val)) &#123;</span><br><span class="line"><span class="comment">// value 为对象</span></span><br><span class="line">val = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(val) <span class="comment">// 转换为字符串赋值给 val</span></span><br><span class="line">&#125;</span><br><span class="line">parts.<span class="title function_">push</span>(<span class="string">`<span class="subst">$&#123;encode(key)&#125;</span>=<span class="subst">$&#123;encode(val)&#125;</span>`</span>) <span class="comment">// 特殊字符转码赋值给 parts</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>拼装成 URL</p><blockquote><p>parts.join(‘&amp;’) 效果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;[<span class="string">&#x27;name=John&#x27;</span>, <span class="string">&#x27;age=30&#x27;</span>, <span class="string">&#x27;hobbies[]=reading&#x27;</span>, <span class="string">&#x27;hobbies[]=coding&#x27;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;name=John&amp;age=30&amp;hobbies[]=reading&amp;hobbies[]=coding&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><img src="C:\Users\DELL\AppData\Roaming\Typora\typora-user-images\image-20250210215213939.png" alt="image-20250210215213939" style="zoom:50%;" /><img src="C:\Users\DELL\AppData\Roaming\Typora\typora-user-images\image-20250210215227134.png" alt="image-20250210215227134" style="zoom:50%;" /><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> serializedParams = parts.<span class="title function_">join</span>(<span class="string">&#x27;&amp;&#x27;</span>) <span class="comment">// 将 parts 数组中的所有元素连接成一个字符串，并使用 &amp; 作为分隔符</span></span><br><span class="line"><span class="keyword">if</span> (serializedParams) &#123;</span><br><span class="line"><span class="comment">// 如果 serializedParams 不为空 则拼接 url</span></span><br><span class="line"><span class="keyword">const</span> markIndex = url.<span class="title function_">indexOf</span>(<span class="string">&#x27;#&#x27;</span>) <span class="comment">// 查找 URL 中是否存在 # 符号 返回 # 符号在 URL 中的位置索引</span></span><br><span class="line"><span class="keyword">if</span> (markIndex !== -<span class="number">1</span>) &#123;</span><br><span class="line">url = url.<span class="title function_">slice</span>(<span class="number">0</span>, markIndex) <span class="comment">// 使用slice方法将URL截取到哈希部分之前，从而去除哈希部分</span></span><br><span class="line">&#125;</span><br><span class="line">url += (url.<span class="title function_">indexOf</span>(<span class="string">&#x27;?&#x27;</span>) === -<span class="number">1</span> ? <span class="string">&#x27;?&#x27;</span> : <span class="string">&#x27;&amp;&#x27;</span>) + serializedParams <span class="comment">// 确保URL中的查询参数?存在</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="处理-body-数据"><a href="#处理-body-数据" class="headerlink" title="处理 body 数据"></a>处理 body 数据</h3><p>helpers&#x2F;util.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> toString = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isDate</span>(<span class="params"><span class="attr">val</span>: <span class="built_in">any</span></span>): val is <span class="title class_">Date</span> &#123;</span><br><span class="line"><span class="comment">// 判断是否为日期</span></span><br><span class="line"><span class="keyword">return</span> toString.<span class="title function_">call</span>(val) === <span class="string">&#x27;[object Date]&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// export function isObject(val: any): val is Object &#123;  // 判断是否为对象</span></span><br><span class="line"><span class="comment">//   return val !== null &amp;&amp; typeof val === &#x27;object&#x27;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isPlainObject</span>(<span class="params"><span class="attr">val</span>: <span class="built_in">any</span></span>): val is <span class="title class_">Object</span> &#123;</span><br><span class="line"><span class="comment">// 判断是否为普通对象</span></span><br><span class="line"><span class="keyword">return</span> toString.<span class="title function_">call</span>(val) === <span class="string">&#x27;[object Object]&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>helpers&#x2F;data.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; isPlainObject &#125; <span class="keyword">from</span> <span class="string">&#x27;./util&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">transformRequest</span>(<span class="params"><span class="attr">data</span>: <span class="built_in">any</span></span>): <span class="built_in">any</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">isPlainObject</span>(data)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">processConfig</span>(<span class="params"><span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line"><span class="comment">// 处理 config</span></span><br><span class="line">config.<span class="property">url</span> = <span class="title function_">transformURL</span>(config)</span><br><span class="line">config.<span class="property">data</span> = <span class="title function_">transformRequestData</span>(config)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">transformURL</span>(<span class="params"><span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line"><span class="comment">// 处理 url 返回拼接后的 url</span></span><br><span class="line"><span class="keyword">const</span> &#123; url, params &#125; = config</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">bulidURL</span>(url, params)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">transformRequestData</span>(<span class="params"><span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line"><span class="comment">// 处理 data</span></span><br><span class="line">config.<span class="property">data</span> = <span class="title function_">transformRequest</span>(config.<span class="property">data</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="处理-header"><a href="#处理-header" class="headerlink" title="处理 header"></a>处理 header</h3><blockquote><p>headers 一般传递诸如认证信息、内容类型等元数据给服务器</p></blockquote><img src="C:\Users\DELL\AppData\Roaming\Typora\typora-user-images\image-20250212030911535.png" alt="image-20250212030911535" style="zoom:50%;" /><p>helpers&#x2F;header.ts</p><blockquote><p>处理 headers</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">processHeaders</span>(<span class="params"><span class="attr">headers</span>: <span class="built_in">any</span>, <span class="attr">data</span>: <span class="built_in">any</span></span>): <span class="built_in">any</span> &#123;</span><br><span class="line"><span class="comment">// processHeaders 函数接收 headers 和 data 两个参数</span></span><br><span class="line"><span class="title function_">normalizeHeaderName</span>(headers, <span class="string">&#x27;Content-Type&#x27;</span>) <span class="comment">// 调用 normalizeHeaderName 函数将 headers 的 Content-Type 属性名规范化</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">isPlainObject</span>(data)) &#123;</span><br><span class="line"><span class="comment">// 如果 data 是一个普通对象</span></span><br><span class="line"><span class="keyword">if</span> (headers &amp;&amp; !headers[<span class="string">&#x27;Content-Type&#x27;</span>]) &#123;</span><br><span class="line"><span class="comment">// 如果 headers 不存在 Content-Type 属性</span></span><br><span class="line">headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/json;charset=utf-8&#x27;</span> <span class="comment">// 设置 Content-Type 属性为 application/json;charset=utf-8</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>Content-Type</code> 是 HTTP 请求头的一部分，用于指示实体主体（即请求或响应的正文部分）的数据类型。它告诉接收方如何解析接收到的数据。例如，当发送 JSON 格式的数据时，通常会将 <code>Content-Type</code> 设置为 <code>application/json</code>，这样接收方就知道应该以 JSON 的形式来解析数据</p></blockquote><p>辅助函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">normalizeHeaderName</span>(<span class="params"><span class="attr">headers</span>: <span class="built_in">any</span>, <span class="attr">normalizedName</span>: <span class="built_in">string</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line"><span class="comment">// normalizeHeaderName 函数接收 headers 和 normalizedName 两个参数</span></span><br><span class="line"><span class="keyword">if</span> (!headers) &#123;</span><br><span class="line"><span class="comment">// 如果 headers 不存在</span></span><br><span class="line"><span class="keyword">return</span> <span class="comment">// 直接返回</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(headers).<span class="title function_">forEach</span>(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 遍历 headers 的所有属性</span></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">name !== normalizedName &amp;&amp;</span><br><span class="line">name.<span class="title function_">toUpperCase</span>() === normalizedName.<span class="title function_">toUpperCase</span>()</span><br><span class="line">) &#123;</span><br><span class="line"><span class="comment">// 如果属性名不等于 normalizedName 并且属性名的大写形式等于 normalizedName 的大写形式</span></span><br><span class="line">headers[normalizedName] = headers[name] <span class="comment">// 将 headers 的属性名设置为 normalizedName (content-type -&gt; Content-Type)</span></span><br><span class="line"><span class="keyword">delete</span> headers[name] <span class="comment">// 删除 headers 的属性名</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> headers <span class="comment">// 返回 headers</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>types&#x2F;index.ts 加入 headers</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">AxiosRequestConfig</span> &#123;</span><br><span class="line"><span class="attr">url</span>: <span class="built_in">string</span></span><br><span class="line"><span class="attr">method</span>?: <span class="title class_">Method</span></span><br><span class="line"><span class="attr">data</span>?: <span class="built_in">any</span></span><br><span class="line"><span class="attr">params</span>?: <span class="built_in">any</span></span><br><span class="line"><span class="attr">headers</span>?: <span class="built_in">any</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.ts 增添处理逻辑</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">processConfig</span>(<span class="params"><span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line"><span class="comment">// 处理 config</span></span><br><span class="line">config.<span class="property">url</span> = <span class="title function_">transformURL</span>(config)</span><br><span class="line">config.<span class="property">headers</span> = <span class="title function_">transformHeaders</span>(config) <span class="comment">// 先处理 headers</span></span><br><span class="line">config.<span class="property">data</span> = <span class="title function_">transformRequestData</span>(config) <span class="comment">// 再处理 data</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">transformHeaders</span>(<span class="params"><span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span></span>): <span class="built_in">any</span> &#123;</span><br><span class="line"><span class="comment">// 处理 headers 调用 processHeaders 方法</span></span><br><span class="line"><span class="keyword">const</span> &#123; headers = &#123;&#125;, data &#125; = config</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">processHeaders</span>(headers, data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xhr.ts 添加 header 处理逻辑</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">xhr</span>(<span class="params"><span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line"><span class="keyword">const</span> &#123; data = <span class="literal">null</span>, url, method = <span class="string">&#x27;get&#x27;</span>, headers &#125; = config <span class="comment">// 添加header解构</span></span><br><span class="line"><span class="keyword">const</span> request = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>() <span class="comment">// 实例化一个 XMLHttpRequest 对象 并赋值给 request 变量</span></span><br><span class="line">request.<span class="title function_">open</span>(method.<span class="title function_">toUpperCase</span>(), url, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(headers).<span class="title function_">forEach</span>(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 遍历 headers 的所有属性</span></span><br><span class="line"><span class="keyword">if</span> (data === <span class="literal">null</span> &amp;&amp; name.<span class="title function_">toLowerCase</span>() === <span class="string">&#x27;content-type&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">// 如果 data 为 null 并且属性名为 content-type</span></span><br><span class="line"><span class="keyword">delete</span> headers[name] <span class="comment">// 删除 headers 的属性名</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">request.<span class="title function_">setRequestHeader</span>(name, headers[name]) <span class="comment">// 调用 setRequestHeader 方法 并传入 name headers[name] 两个参数 并赋值给 request 变量</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">request.<span class="title function_">send</span>(data) <span class="comment">// 调用 send 方法 并传入 data 参数 并赋值给 request 变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote><p>这部分处理实现了</p><p>为 Content-Type 自动添加 application&#x2F;json;charset&#x3D;UTF-8（告知服务端解析的是 JSON 数据）</p></blockquote><h3 id="获取处理-response"><a href="#获取处理-response" class="headerlink" title="获取处理 response"></a>获取处理 response</h3><p>types &#x2F; index.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">AxiosRequestConfig</span> &#123;</span><br><span class="line"><span class="comment">//config接口</span></span><br><span class="line"><span class="attr">url</span>: <span class="built_in">string</span></span><br><span class="line"><span class="attr">method</span>?: <span class="title class_">Method</span></span><br><span class="line"><span class="attr">data</span>?: <span class="built_in">any</span></span><br><span class="line"><span class="attr">params</span>?: <span class="built_in">any</span></span><br><span class="line"><span class="attr">headers</span>?: <span class="built_in">any</span></span><br><span class="line"><span class="attr">responseType</span>?: <span class="title class_">XMLHttpRequestResponseType</span> <span class="comment">//新增</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">AxiosResponse</span> &#123;</span><br><span class="line"><span class="comment">//response接口</span></span><br><span class="line"><span class="attr">data</span>: <span class="built_in">any</span></span><br><span class="line"><span class="attr">status</span>: <span class="built_in">number</span></span><br><span class="line"><span class="attr">statusText</span>: <span class="built_in">string</span></span><br><span class="line"><span class="attr">headers</span>: <span class="built_in">any</span></span><br><span class="line"><span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span></span><br><span class="line"><span class="attr">request</span>: <span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">AxiosPromise</span> <span class="keyword">extends</span> <span class="title class_">Promise</span>&lt;<span class="title class_">AxiosResponse</span>&gt; &#123;</span><br><span class="line"><span class="comment">//promise接口</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xhr.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AxiosRequestConfig</span>, <span class="title class_">AxiosPromise</span>, <span class="title class_">AxiosResponse</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">xhr</span>(<span class="params"><span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span></span>): <span class="title class_">AxiosPromise</span> &#123;<span class="comment">// xhr 函数接收一个 config 参数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="comment">// 返回一个 Promise 对象 并传入 resolve reject 两个参数</span></span><br><span class="line">    <span class="keyword">const</span> &#123; data = <span class="literal">null</span>, url, method = <span class="string">&#x27;get&#x27;</span>, headers, responseType &#125; = config <span class="comment">// 解构赋值拿到变量</span></span><br><span class="line">    <span class="keyword">const</span> request = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>() <span class="comment">// 实例化一个 XMLHttpRequest 对象 并赋值给 request 变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (responseType) &#123;</span><br><span class="line">      request.<span class="property">responseType</span> = responseType</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request.<span class="title function_">open</span>(method.<span class="title function_">toUpperCase</span>(), url, <span class="literal">true</span>) <span class="comment">// 调用 open 方法 并传入 method url true 三个参数 并将 method 转换为大写并赋值给 method,url. async:true异步</span></span><br><span class="line"></span><br><span class="line">    request.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> <span class="title function_">handleLoad</span>(<span class="params"></span>) &#123;<span class="comment">// 调用 onreadystatechange 方法 并传入 handleLoad 函数 并赋值给 request 变量</span></span><br><span class="line">      <span class="keyword">if</span> (request.<span class="property">readyState</span> !== <span class="number">4</span>) &#123;<span class="comment">// 4状态为正确接收到数据 (// 没有收到正确的响应)</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> responseHeaders = request.<span class="title function_">getAllResponseHeaders</span>() <span class="comment">// 调用 getAllResponseHeaders 方法 并赋值给 responseHeaders 变量（后面要处理这个字符串）</span></span><br><span class="line">      <span class="keyword">const</span> responseData = responseType &amp;&amp; responseType !== <span class="string">&#x27;text&#x27;</span> ? request.<span class="property">response</span> : request.<span class="property">responseText</span> <span class="comment">// 调用 responseText 方法 并赋值给 responseData 变量</span></span><br><span class="line">      <span class="keyword">const</span> <span class="attr">response</span>: <span class="title class_">AxiosResponse</span> = &#123;</span><br><span class="line">        <span class="attr">data</span>: responseData,</span><br><span class="line">        <span class="attr">status</span>: request.<span class="property">status</span>,</span><br><span class="line">        <span class="attr">statusText</span>: request.<span class="property">statusText</span>,</span><br><span class="line">        <span class="attr">headers</span>: responseHeaders,</span><br><span class="line">        config,</span><br><span class="line">        request</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">resolve</span>(response) <span class="comment">// 调用 resolve 方法 并传入 response 参数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(headers).<span class="title function_">forEach</span>(<span class="function"><span class="params">name</span> =&gt;</span> &#123;<span class="comment">// 遍历 headers 的所有属性</span></span><br><span class="line">      <span class="keyword">if</span> (data === <span class="literal">null</span> &amp;&amp; name.<span class="title function_">toLowerCase</span>() === <span class="string">&#x27;content-type&#x27;</span>) &#123;<span class="comment">// 如果 data 为 null 并且属性名为 content-type</span></span><br><span class="line">        <span class="keyword">delete</span> headers[name] <span class="comment">// 删除 headers 的属性名</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        request.<span class="title function_">setRequestHeader</span>(name, headers[name]) <span class="comment">// 调用 setRequestHeader 方法 并传入 name headers[name] 两个参数 并赋值给 request 变量</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    request.<span class="title function_">send</span>(data) <span class="comment">// 调用 send 方法 并传入 data 参数 并赋值给 request 变量</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AxiosRequestConfig</span>, <span class="title class_">AxiosPromise</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">axios</span>(<span class="params"><span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span></span>): <span class="title class_">AxiosPromise</span> &#123;</span><br><span class="line"><span class="comment">// axios 函数接收一个 config 参数</span></span><br><span class="line"><span class="title function_">processConfig</span>(config)</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">xhr</span>(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getAllResponseHeaders</code>方法处理</p><p>XMLHttpRequest 对象的 getAllResponseHeaders 方法获取到的值是如下字符串</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">date<span class="punctuation">:</span>Fri<span class="punctuation">,</span><span class="number">05</span> Apr <span class="number">2019</span> <span class="number">12</span><span class="punctuation">:</span><span class="number">40</span><span class="punctuation">:</span><span class="number">49</span> GMT</span><br><span class="line">etag<span class="punctuation">:</span> W/<span class="string">&quot;d-Ssxx4FRxEutDLwo2+xkkxKc4y0k&#x27;&#x27;</span></span><br><span class="line"><span class="string">connection: keep-alive</span></span><br><span class="line"><span class="string">x-powered-by: Express</span></span><br><span class="line"><span class="string">content-length:13</span></span><br><span class="line"><span class="string">content-type:application/json;charset=utf-8</span></span><br></pre></td></tr></table></figure><blockquote><p>每一行都是以回车和换行符<code>\r\n</code>结束，是每个 header 属性的分隔符</p></blockquote><p>而我们希望解析成的对象结构</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    date<span class="punctuation">:</span>Fri<span class="punctuation">,</span><span class="number">05</span> Apr <span class="number">2019</span> <span class="number">12</span><span class="punctuation">:</span><span class="number">40</span><span class="punctuation">:</span><span class="number">49</span> GMT</span><br><span class="line">etag<span class="punctuation">:</span> W/<span class="string">&quot;d-Ssxx4FRxEutDLwo2+xkkxKc4y0k&#x27;&#x27;,</span></span><br><span class="line"><span class="string">connection: keep-alive,</span></span><br><span class="line"><span class="string">x-powered-by: Express,</span></span><br><span class="line"><span class="string">content-length:13</span></span><br><span class="line"><span class="string">content-type:application/json;charset=utf-8</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>headers.ts 新增 parseHeaders 方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">parseHeaders</span>(<span class="params"><span class="attr">headers</span>: <span class="built_in">string</span></span>): <span class="built_in">any</span> &#123;</span><br><span class="line"><span class="comment">// parseHeaders 函数接收 headers 参数</span></span><br><span class="line"><span class="keyword">let</span> parsed = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>) <span class="comment">// 创建一个空对象</span></span><br><span class="line"><span class="keyword">if</span> (!headers) &#123;</span><br><span class="line"><span class="comment">// 如果 headers 不存在</span></span><br><span class="line"><span class="keyword">return</span> parsed <span class="comment">// 返回 parsed</span></span><br><span class="line">&#125;</span><br><span class="line">headers.<span class="title function_">split</span>(<span class="string">&#x27;\r\n&#x27;</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">line</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 遍历 headers 的每一行</span></span><br><span class="line"><span class="keyword">let</span> [key, val] = line.<span class="title function_">split</span>(<span class="string">&#x27;:&#x27;</span>) <span class="comment">// 分割每一行的 key 和 val</span></span><br><span class="line">key = key.<span class="title function_">trim</span>().<span class="title function_">toLowerCase</span>() <span class="comment">// 去掉 key 的空格并将 key 转换为小写</span></span><br><span class="line"><span class="keyword">if</span> (!key) &#123;</span><br><span class="line"><span class="comment">// 如果 key 不存在</span></span><br><span class="line"><span class="keyword">return</span> <span class="comment">// 直接返回</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (val) &#123;</span><br><span class="line"><span class="comment">// 如果 val 存在</span></span><br><span class="line">val = val.<span class="title function_">trim</span>() <span class="comment">// 去掉 val 的空格</span></span><br><span class="line">&#125;</span><br><span class="line">parsed[key] = val <span class="comment">// 将 key 和 val 赋值给 parsed</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> parsed <span class="comment">// 返回 parsed</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="处理响应-data"><a href="#处理响应-data" class="headerlink" title="处理响应 data"></a>处理响应 data</h3><p>不设置 responseType 情况下，服务端返回数据是字符串类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data: &quot;&#123;&quot;a&quot;:1,&quot;b&quot;:2&#125;&quot;</span><br></pre></td></tr></table></figure><p>我们要转成对象</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data<span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    a<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    b<span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>data.ts 新增 transformResponse 转化函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">transformResponse</span>(<span class="params"><span class="attr">data</span>: <span class="built_in">any</span></span>): <span class="built_in">any</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> data === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line"><span class="comment">// do nothing</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.ts 处理 axios</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; transformRequest, transformResponse &#125; <span class="keyword">from</span> <span class="string">&#x27;./helpers/data&#x27;</span> <span class="comment">// 新增引入转化函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">axios</span>(<span class="params"><span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span></span>): <span class="title class_">AxiosPromise</span> &#123;</span><br><span class="line"><span class="title function_">processConfig</span>(config)</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">xhr</span>(config).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//请求结束后对 response data 进行处理</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">transformResponseData</span>(res)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">transformResponseData</span>(<span class="params"><span class="attr">res</span>: <span class="title class_">AxiosResponse</span></span>): <span class="title class_">AxiosResponse</span> &#123;</span><br><span class="line"><span class="comment">// 处理 response data</span></span><br><span class="line">res.<span class="property">data</span> = <span class="title function_">transformResponse</span>(res.<span class="property">data</span>)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/// 基础核心功能至此已全部实现 ///</span><br></pre></td></tr></table></figure><h2 id="错误处理-reject-拒回"><a href="#错误处理-reject-拒回" class="headerlink" title="错误处理(reject 拒回)"></a>错误处理(reject 拒回)</h2><h3 id="处理网络错误"><a href="#处理网络错误" class="headerlink" title="处理网络错误"></a>处理网络错误</h3><p>网络不通时发送请求会触发 XMLHttpRequest 对象实例的 error 事件，所以我们可以在 onerror 事件回调函数中捕获此类错误</p><p>xhr.ts 中添加</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request.<span class="property">onerror</span> = <span class="keyword">function</span> <span class="title function_">handleError</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 调用 onerror 方法 并传入 handleError 函数 并赋值给 request 变量</span></span><br><span class="line"><span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Network Error&#x27;</span>)) <span class="comment">// 调用 reject 方法 并传入 Network Error 参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="处理超时错误"><a href="#处理超时错误" class="headerlink" title="处理超时错误"></a>处理超时错误</h3><p>设置一个 timeout，当请求超过某个时间后没收到响应则终止，并触发 timeout 事件</p><blockquote><p>默认超时时间为 0（永不超时，我们首先需要允许程序可配置超时时间</p></blockquote><p>type &#x2F; index.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">AxiosRequestConfig</span> &#123;</span><br><span class="line"><span class="comment">//config接口</span></span><br><span class="line"><span class="attr">url</span>: <span class="built_in">string</span></span><br><span class="line"><span class="attr">method</span>?: <span class="title class_">Method</span></span><br><span class="line"><span class="attr">data</span>?: <span class="built_in">any</span></span><br><span class="line"><span class="attr">params</span>?: <span class="built_in">any</span></span><br><span class="line"><span class="attr">headers</span>?: <span class="built_in">any</span></span><br><span class="line"><span class="attr">responseType</span>?: <span class="title class_">XMLHttpRequestResponseType</span></span><br><span class="line"><span class="attr">timeout</span>?: <span class="built_in">number</span> <span class="comment">// 新增timeout</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xhr.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">data = <span class="literal">null</span>,</span><br><span class="line">url,</span><br><span class="line">method = <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">headers,</span><br><span class="line">responseType,</span><br><span class="line">timeout,</span><br><span class="line">&#125; = config <span class="comment">// 新增解构</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增逻辑</span></span><br><span class="line"><span class="keyword">if</span> (timeout) &#123;</span><br><span class="line"><span class="comment">// 如果 timeout 存在</span></span><br><span class="line">request.<span class="property">timeout</span> = timeout</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request.<span class="property">ontimeout</span> = <span class="keyword">function</span> <span class="title function_">handleTimeout</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Timeout of <span class="subst">$&#123;timeout&#125;</span> ms exceeded`</span>)) <span class="comment">// 超过 $&#123;timeout&#125; 毫秒 超时</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="状态码处理-200-错误"><a href="#状态码处理-200-错误" class="headerlink" title="状态码处理(!200 错误)"></a>状态码处理(!200 错误)</h3><blockquote><p>处理时机：接收到响应的时候</p></blockquote><p>xhr.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">request.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> <span class="title function_">handleLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (request.<span class="property">readyState</span> !== <span class="number">4</span>) &#123;</span><br><span class="line"><span class="comment">// 没有收到正确的响应</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//也就是在这里//</span></span><br><span class="line"><span class="keyword">if</span> (request.<span class="property">status</span> === <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// 如果发送网络错误 || 超时错误</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">resolve</span>(response) <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleResponse</span>(<span class="params"><span class="attr">response</span>: <span class="title class_">AxiosResponse</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line"><span class="comment">// 传入处理 response 参数</span></span><br><span class="line"><span class="keyword">if</span> (response.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; response.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span><br><span class="line"><span class="comment">// 状态码 大于等于 200 并且小于 300</span></span><br><span class="line"><span class="title function_">resolve</span>(response) <span class="comment">// 调用 resolve 方法 并传入 response 参数</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Request failed with status code <span class="subst">$&#123;response.status&#125;</span>`</span>)) <span class="comment">// 报错状态码</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="错误信息增强"><a href="#错误信息增强" class="headerlink" title="错误信息增强"></a>错误信息增强</h3><blockquote><p>按照之前的操作，我们实现了对基础错误信息的处理，但我们对外提供的错误信息是十分有限的</p><p>我们希望对外提供的错误信息包括</p><p>错误文本信息（报错显示）</p><p>请求对象配置 config</p><p>错误代码 code</p><p>XMLHttpRequest 对象实例 request</p><p>自定义响应对象 response</p></blockquote><h4 id="创建-AxiosError-类"><a href="#创建-AxiosError-类" class="headerlink" title="创建 AxiosError 类"></a>创建 AxiosError 类</h4><p>types &#x2F; index.ts 定义接口</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">AxiosError</span> <span class="keyword">extends</span> <span class="title class_">Error</span> &#123;</span><br><span class="line"><span class="comment">//error接口</span></span><br><span class="line"><span class="attr">isAxiosError</span>: <span class="built_in">boolean</span></span><br><span class="line"><span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span></span><br><span class="line"><span class="attr">code</span>?: <span class="built_in">string</span></span><br><span class="line"><span class="attr">request</span>?: <span class="built_in">any</span></span><br><span class="line"><span class="attr">response</span>?: <span class="title class_">AxiosResponse</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建 helpers &#x2F; error.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AxiosRequestConfig</span>, <span class="title class_">AxiosResponse</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AxiosError</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Error</span> &#123;</span><br><span class="line"><span class="comment">// 定义一个AxiosError类继承Error类 实现AxiosError接口 并设置 isAxiosError为true</span></span><br><span class="line"><span class="attr">isAxiosError</span>: <span class="built_in">boolean</span></span><br><span class="line"><span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span></span><br><span class="line"><span class="attr">code</span>?: <span class="built_in">string</span> | <span class="literal">null</span></span><br><span class="line"><span class="attr">request</span>?: <span class="built_in">any</span></span><br><span class="line"><span class="attr">response</span>?: <span class="title class_">AxiosResponse</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params"><span class="comment">//构造函数 接收五个参数赋值给对应的属性 并设置 isAxiosError为true</span></span></span><br><span class="line"><span class="params"><span class="attr">message</span>: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params"><span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span>,</span></span><br><span class="line"><span class="params"><span class="attr">code</span>?: <span class="built_in">string</span> | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params"><span class="attr">request</span>?: <span class="built_in">any</span>,</span></span><br><span class="line"><span class="params"><span class="attr">response</span>?: <span class="title class_">AxiosResponse</span></span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">super</span>(message) <span class="comment">//调用父类的构造函数 传入message参数赋值给message属性</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">config</span> = config</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">code</span> = code</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">request</span> = request</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">response</span> = response</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">isAxiosError</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(<span class="variable language_">this</span>, <span class="title class_">AxiosError</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// 修复原型链问题</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createError</span>(<span class="params"> <span class="comment">//定义一个createError函数 接收五个参数 并返回一个AxiosError对象</span></span></span><br><span class="line"><span class="params"><span class="attr">message</span>: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params"><span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span>,</span></span><br><span class="line"><span class="params"><span class="attr">code</span>?: <span class="built_in">string</span> | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params"><span class="attr">request</span>?: <span class="built_in">any</span>,</span></span><br><span class="line"><span class="params"><span class="attr">response</span>?: <span class="title class_">AxiosResponse</span></span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">const</span> error = <span class="keyword">new</span> <span class="title class_">AxiosError</span>(message, config, code, request, response)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="createError-方法应用"><a href="#createError-方法应用" class="headerlink" title="createError 方法应用"></a>createError 方法应用</h4><blockquote><p>对错误对象创建的逻辑进行修改</p></blockquote><p>xhr.ts</p><p><strong><em>onerror 修改</em></strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.<span class="property">onerror</span> = <span class="keyword">function</span> <span class="title function_">handleError</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Network Error&#x27;</span>)) <span class="comment">// 调用 reject 方法 并传入 Network Error 参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>替换为</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.<span class="property">onerror</span> = <span class="keyword">function</span> <span class="title function_">handleError</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title function_">reject</span>(<span class="title function_">createError</span>(<span class="string">&#x27;Network Error&#x27;</span>, config, <span class="literal">null</span>, request)) <span class="comment">// 传入 &#x27;Network Error&#x27;,config,null,request 参数（事件触发时拿不到response就不传了） 调用 createError 方法并传入参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>ontimeout 修改</em></strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request.<span class="property">ontimeout</span> = <span class="keyword">function</span> <span class="title function_">handleTimeout</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 调用 ontimeout 方法 并传入 handleTimeout 函数 并赋值给 request 变量</span></span><br><span class="line"><span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Timeout of <span class="subst">$&#123;timeout&#125;</span> ms exceeded`</span>)) <span class="comment">// 调用 reject 方法 并传入 Timeout of $&#123;timeout&#125; ms exceeded 参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>替换为</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">request.<span class="property">ontimeout</span> = <span class="keyword">function</span> <span class="title function_">handleTimeout</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 调用 ontimeout 方法 并传入 handleTimeout 函数 并赋值给 request 变量</span></span><br><span class="line"><span class="title function_">reject</span>(</span><br><span class="line"><span class="title function_">createError</span>(</span><br><span class="line"><span class="string">`Timeout of <span class="subst">$&#123;timeout&#125;</span> ms exceeded`</span>,</span><br><span class="line">config,</span><br><span class="line"><span class="string">&#x27;ECONNABORTED&#x27;</span>,</span><br><span class="line">request</span><br><span class="line">)</span><br><span class="line">) <span class="comment">// 传入 `Timeout of $&#123;timeout&#125; ms exceeded`,config,&#x27;ECONNABORTED&#x27;,request 参数 调用 createError 方法 并传入参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>handleResponse 修改</em></strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleResponse</span>(<span class="params"><span class="attr">response</span>: <span class="title class_">AxiosResponse</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line"><span class="comment">// 传入处理 response 参数</span></span><br><span class="line"><span class="keyword">if</span> (response.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; response.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span><br><span class="line"><span class="comment">// 状态码 大于等于 200 并且小于 300</span></span><br><span class="line"><span class="title function_">resolve</span>(response) <span class="comment">// 调用 resolve 方法 并传入 response 参数</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Request failed with status code <span class="subst">$&#123;response.status&#125;</span>`</span>)) <span class="comment">// 调用 reject 方法 并传入 Request failed with status code $&#123;response.status&#125; 参数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>替换为</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleResponse</span>(<span class="params"><span class="attr">response</span>: <span class="title class_">AxiosResponse</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line"><span class="comment">// 传入处理 response 参数</span></span><br><span class="line"><span class="keyword">if</span> (response.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; response.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span><br><span class="line"><span class="comment">// 状态码 大于等于 200 并且小于 300</span></span><br><span class="line"><span class="title function_">resolve</span>(response) <span class="comment">// 调用 resolve 方法 并传入 response 参数</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title function_">reject</span>(</span><br><span class="line"><span class="title function_">createError</span>(</span><br><span class="line"><span class="string">`Request failed with status code <span class="subst">$&#123;response.status&#125;</span>`</span>,</span><br><span class="line">config,</span><br><span class="line"><span class="literal">null</span>,</span><br><span class="line">request,</span><br><span class="line">response</span><br><span class="line">)</span><br><span class="line">) <span class="comment">// 传入 `Request failed with status code $&#123;response.status&#125;`,config,null,request,response 参数 调用 createError 方法 并传入参数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口扩展"><a href="#接口扩展" class="headerlink" title="接口扩展"></a>接口扩展</h2><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p>为了用户更加方便地使用 axios 发送请求，我们可以为所有支持的请求方法扩展一些接口</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//[可选项]</span></span><br><span class="line">axios.<span class="property">request</span>(config)</span><br><span class="line">axios.<span class="property">get</span>(url[,config])</span><br><span class="line">axios.<span class="property">delete</span>(url[,config])</span><br><span class="line">axios.<span class="property">head</span>(url[,config])</span><br><span class="line">axios.<span class="property">options</span>(url[,config])</span><br><span class="line">axios.<span class="property">post</span>(url[,datal,config])</span><br><span class="line">axios.<span class="property">put</span>(url[,datal,config])</span><br><span class="line">axios.<span class="property">patch</span>(url[,datal,config])</span><br></pre></td></tr></table></figure><p>types &#x2F; index.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Axios</span> &#123;</span><br><span class="line"><span class="comment">//axios接口</span></span><br><span class="line"><span class="title function_">request</span>(<span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">AxiosPromise</span></span><br><span class="line"><span class="title function_">get</span>(<span class="attr">url</span>: <span class="built_in">string</span>, <span class="attr">config</span>?: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">AxiosPromise</span></span><br><span class="line"><span class="title function_">delete</span>(<span class="attr">url</span>: <span class="built_in">string</span>, <span class="attr">config</span>?: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">AxiosPromise</span></span><br><span class="line"><span class="title function_">head</span>(<span class="attr">url</span>: <span class="built_in">string</span>, <span class="attr">config</span>?: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">AxiosPromise</span></span><br><span class="line"><span class="title function_">options</span>(<span class="attr">url</span>: <span class="built_in">string</span>, <span class="attr">config</span>?: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">AxiosPromise</span></span><br><span class="line"><span class="title function_">post</span>(<span class="attr">url</span>: <span class="built_in">string</span>, <span class="attr">data</span>?: <span class="built_in">any</span>, <span class="attr">config</span>?: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">AxiosPromise</span></span><br><span class="line"><span class="title function_">put</span>(<span class="attr">url</span>: <span class="built_in">string</span>, <span class="attr">data</span>?: <span class="built_in">any</span>, <span class="attr">config</span>?: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">AxiosPromise</span></span><br><span class="line"><span class="title function_">patch</span>(<span class="attr">url</span>: <span class="built_in">string</span>, <span class="attr">data</span>?: <span class="built_in">any</span>, <span class="attr">config</span>?: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">AxiosPromise</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">AxiosInstance</span> <span class="keyword">extends</span> <span class="title class_">Axios</span> &#123;</span><br><span class="line"><span class="comment">//axios实例接口 既有函数类型又有属性接口</span></span><br><span class="line">(<span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">AxiosPromise</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建-Axios-ts"><a href="#创建-Axios-ts" class="headerlink" title="创建 Axios.ts"></a>创建 Axios.ts</h3><blockquote><p>存放一些发送请求核心代码</p></blockquote><p>core &#x2F; Axios.ts &#x2F;&#x2F;大写表示是一个类</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AxiosRequestConfig</span>, <span class="title class_">AxiosPromise</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Axios</span> &#123;</span><br><span class="line"><span class="title function_">request</span>(<span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">AxiosPromise</span> &#123;</span><br><span class="line"><span class="comment">// 实现request方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>core &#x2F; dispatchRequest.ts</p><blockquote><p>封装 axios.ts 核心代码</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AxiosRequestConfig</span>, <span class="title class_">AxiosPromise</span>, <span class="title class_">AxiosResponse</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../types&#x27;</span></span><br><span class="line"><span class="keyword">import</span> xhr <span class="keyword">from</span> <span class="string">&#x27;../xhr&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; bulidURL &#125; <span class="keyword">from</span> <span class="string">&#x27;../helpers/url&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; transformRequest, transformResponse &#125; <span class="keyword">from</span> <span class="string">&#x27;../helpers/data&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; processHeaders &#125; <span class="keyword">from</span> <span class="string">&#x27;../helpers/header&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">dispatchRequest</span>(<span class="params"></span></span><br><span class="line"><span class="params"><span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span></span></span><br><span class="line"><span class="params"></span>): <span class="title class_">AxiosPromise</span> &#123;</span><br><span class="line"><span class="comment">// dispatchRequest 函数接收一个 config 参数</span></span><br><span class="line"><span class="title function_">processConfig</span>(config)</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">xhr</span>(config).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//请求结束后对 response data 进行处理</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">transformResponseData</span>(res)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processConfig</span>(<span class="params"><span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line"><span class="comment">// 处理 config</span></span><br><span class="line">config.<span class="property">url</span> = <span class="title function_">transformURL</span>(config)</span><br><span class="line">config.<span class="property">headers</span> = <span class="title function_">transformHeaders</span>(config) <span class="comment">// 先处理 headers</span></span><br><span class="line">config.<span class="property">data</span> = <span class="title function_">transformRequestData</span>(config) <span class="comment">// 再处理 data</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">transformURL</span>(<span class="params"><span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line"><span class="comment">// 处理 url 返回拼接后的 url</span></span><br><span class="line"><span class="keyword">const</span> &#123; url, params &#125; = config</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">bulidURL</span>(url, params)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">transformRequestData</span>(<span class="params"><span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line"><span class="comment">// 处理 data 调用 transformRequest 方法</span></span><br><span class="line">config.<span class="property">data</span> = <span class="title function_">transformRequest</span>(config.<span class="property">data</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">transformHeaders</span>(<span class="params"><span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span></span>): <span class="built_in">any</span> &#123;</span><br><span class="line"><span class="comment">// 处理 headers 调用 processHeaders 方法</span></span><br><span class="line"><span class="keyword">const</span> &#123; headers = &#123;&#125;, data &#125; = config</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">processHeaders</span>(headers, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">transformResponseData</span>(<span class="params"><span class="attr">res</span>: <span class="title class_">AxiosResponse</span></span>): <span class="title class_">AxiosResponse</span> &#123;</span><br><span class="line"><span class="comment">// 处理 response data</span></span><br><span class="line">res.<span class="property">data</span> = <span class="title function_">transformResponse</span>(res.<span class="property">data</span>)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>然后将 xhr.ts 移入 core 文件夹（xhr 也作为核心模块）</p></blockquote><p><strong>部分报错修改</strong> (严格模式)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dispatchRequest.ts</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">bulidURL</span>(url!, params)</span><br><span class="line"></span><br><span class="line"><span class="comment">//xht.ts</span></span><br><span class="line">request.<span class="title function_">open</span>(method.<span class="title function_">toUpperCase</span>(), url!, <span class="literal">true</span>) <span class="comment">// 调用 open 方法传入 method url true 三个参数 并将 method 转换为大写并赋值给 method,url. async:true异步</span></span><br></pre></td></tr></table></figure><blockquote><p>Tips： 断言（ ! ）</p><blockquote><p>TS 中，当你保证某个变量不会为 <code>null</code> 或者 <code>undefined</code>，但编译器却无法推断出来的时候，就可以使用非空断言操作符 ( ! )，不会在运行时进行检查，但要是你做出了错误的保证，在运行时就可能会出现错误。</p></blockquote></blockquote><h3 id="实现-Axios-类中接口"><a href="#实现-Axios-类中接口" class="headerlink" title="实现 Axios 类中接口"></a>实现 Axios 类中接口</h3><p><code>Axios.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AxiosRequestConfig</span>, <span class="title class_">AxiosPromise</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../types&#x27;</span></span><br><span class="line"><span class="keyword">import</span> dispatchRequest <span class="keyword">from</span> <span class="string">&#x27;./dispatchRequest&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Axios</span> &#123;</span><br><span class="line">  <span class="title function_">request</span>(...)</span><br><span class="line">  <span class="title function_">get</span>(...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现 <strong><em>request</em></strong> 接口</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">request</span>(<span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">AxiosPromise</span> &#123;<span class="comment">// 传入config参数 并返回AxiosPromise</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">dispatchRequest</span>(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong><em>逻辑封装</em></strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">_requestMethodWithoutData</span>(</span><br><span class="line">    <span class="attr">method</span>: <span class="title class_">Method</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">config</span>?: <span class="title class_">AxiosRequestConfig</span></span><br><span class="line">): <span class="title class_">AxiosPromise</span> &#123;</span><br><span class="line">    <span class="comment">// 封装_requestMethodWithoutData方法传入method,url和config参数 并返回AxiosPromise</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(<span class="title class_">Object</span>.<span class="title function_">assign</span>(config || &#123;&#125;, &#123; method, url &#125;)) <span class="comment">// 调用request方法 并传入一个对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>实现 <strong><em>get</em></strong> 接口</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">get</span>(<span class="attr">url</span>: <span class="built_in">string</span>, <span class="attr">config</span>?: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">AxiosPromise</span> &#123;<span class="comment">// 传入url和config参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">_requestMethodWithoutData</span>(<span class="string">&#x27;get&#x27;</span>, url, config) <span class="comment">// 调用方法 传入一个对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现 <strong><em>delete</em></strong> 接口</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">delete</span>(<span class="attr">url</span>: <span class="built_in">string</span>, <span class="attr">config</span>?: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">AxiosPromise</span> &#123;<span class="comment">// 传入url和config参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">_requestMethodWithoutData</span>(<span class="string">&#x27;delete&#x27;</span>, url, config) <span class="comment">// 调用方法 传入一个对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现 <strong><em>head</em></strong> 接口</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">head</span>(<span class="attr">url</span>: <span class="built_in">string</span>, <span class="attr">config</span>?: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">AxiosPromise</span> &#123;<span class="comment">// 传入url和config参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">_requestMethodWithoutData</span>(<span class="string">&#x27;head&#x27;</span>, url, config) <span class="comment">// 调用方法 并传入一个对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现 <strong><em>options</em></strong> 接口</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">options</span>(<span class="attr">url</span>: <span class="built_in">string</span>, <span class="attr">config</span>?: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">AxiosPromise</span> &#123;<span class="comment">// 传入url和config参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">_requestMethodWithoutData</span>(<span class="string">&#x27;options&#x27;</span>, url, config) <span class="comment">// 调用方法 并传入一个对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong><em>逻辑封装</em></strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">_requestMethodWithData</span>(</span><br><span class="line">    <span class="attr">method</span>: <span class="title class_">Method</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">data</span>?: <span class="built_in">any</span>,</span><br><span class="line">    <span class="attr">config</span>?: <span class="title class_">AxiosRequestConfig</span></span><br><span class="line">): <span class="title class_">AxiosPromise</span> &#123;</span><br><span class="line">    <span class="comment">// 封装_requestMethodWithData方法传入method,url,data和config参数 并返回AxiosPromise</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(<span class="title class_">Object</span>.<span class="title function_">assign</span>(config || &#123;&#125;, &#123; method, url, data &#125;)) <span class="comment">// 调用request方法 并传入一个对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>实现 <strong><em>post</em></strong> 接口</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">head</span>(<span class="attr">url</span>: <span class="built_in">string</span>, <span class="attr">config</span>?: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">AxiosPromise</span> &#123;<span class="comment">// 传入url,data和config参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">_requestMethodWithData</span>(<span class="string">&#x27;post&#x27;</span>, url, data, config) <span class="comment">// 调用方法 并传入一个对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现 <strong><em>put</em></strong> 接口</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">put</span>(<span class="attr">url</span>: <span class="built_in">string</span>, <span class="attr">config</span>?: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">AxiosPromise</span> &#123;<span class="comment">// 传入url,data和config参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">_requestMethodWithData</span>(<span class="string">&#x27;put&#x27;</span>, url, data, config) <span class="comment">// 调用方法 并传入一个对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现 <strong><em>patch</em></strong> 接口</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">patch</span>(<span class="attr">url</span>: <span class="built_in">string</span>, <span class="attr">config</span>?: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">AxiosPromise</span> &#123;<span class="comment">// 传入url,data和config参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">_requestMethodWithData</span>(<span class="string">&#x27;patch&#x27;</span>, url, data, config) <span class="comment">// 调用方法 并传入一个对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="混合对象实现"><a href="#混合对象实现" class="headerlink" title="混合对象实现"></a>混合对象实现</h3><blockquote><p>首先这个对象是函数，其次这个对象包括 Axios 类内所有原型属性和实例属性</p></blockquote><p>helpers &#x2F; utils</p><blockquote><p><code>extend</code> 合成函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">const</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">const</span> source = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;</span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">extend</span>(target, source)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// 输出: &#123; a: 1, b: 2 &#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>这里我们使用**<em>泛型</em>** <code>T</code> 和 <code>U</code></p><p><code>T</code> 代表目标对象 <code>to</code> 的类型，<code>U</code> 代表源对象 <code>from</code> 的类型</p><p>函数的返回值类型是 <code>T &amp; U</code>，也就是 <code>to</code> 和 <code>from</code> 两个对象类型的交集。</p></blockquote></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> extend&lt;T, U&gt;(<span class="attr">to</span>: T, <span class="attr">from</span>: U): T &amp; U &#123;</span><br><span class="line"><span class="comment">// 合并对象</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> <span class="keyword">from</span>) &#123;</span><br><span class="line">;(to <span class="keyword">as</span> T &amp; U)[key] = <span class="keyword">from</span>[key] <span class="keyword">as</span> <span class="built_in">any</span> <span class="comment">//把 from 对象的属性值赋值给 to 对象对应的属性。这里运用了类型断言 as T &amp; U 和 as any，让 TypeScript 编译器认可这种赋值操作。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> to <span class="keyword">as</span> T &amp; U <span class="comment">//也用了类型断言 as T &amp; U</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工厂函数实现"><a href="#工厂函数实现" class="headerlink" title="工厂函数实现"></a>工厂函数实现</h3><p>处理 axios.ts</p><blockquote><p>删掉内容，只保留 export default axios</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AxiosInstance</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./types&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Axios</span> <span class="keyword">from</span> <span class="string">&#x27;./core/Axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; extend &#125; <span class="keyword">from</span> <span class="string">&#x27;./helpers/util&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createInstance</span>(<span class="params"></span>): <span class="title class_">AxiosInstance</span> &#123;</span><br><span class="line"><span class="keyword">const</span> context = <span class="keyword">new</span> <span class="title class_">Axios</span>() <span class="comment">//实例化一个 Axios 对象 并赋值给 context 变量</span></span><br><span class="line"><span class="keyword">const</span> instance = <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">request</span>.<span class="title function_">bind</span>(context) <span class="comment">//调用 request 方法 并传入 context 参数 并赋值给 instance 变量 绑定 this 指向 context</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">extend</span>(instance, context) <span class="comment">//调用 extend 方法 并传入 instance 和 context 参数 实现 instance 对象继承 context 对象</span></span><br><span class="line"><span class="keyword">return</span> instance <span class="keyword">as</span> <span class="title class_">AxiosInstance</span> <span class="comment">//返回 instance 对象 并断言为 AxiosInstance 类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> axios = <span class="title function_">createInstance</span>() <span class="comment">//调用 createInstance 方法 并赋值给 axios 变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios</span><br></pre></td></tr></table></figure><h3 id="axios-函数重载"><a href="#axios-函数重载" class="headerlink" title="axios 函数重载"></a>axios 函数重载</h3><blockquote><p>目前我们函数只能存放一个对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">url: &#x27;/extend/post&#x27;,</span><br><span class="line">method: &#x27;post&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">msg:&#x27;hi&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>那么如果 axios 同时含有两个参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">axios(&#x27;/extend/post&#x27;,&#123;</span><br><span class="line">method: &#x27;post&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">msg:&#x27;hi&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></blockquote><p>type &#x2F; index.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">AxiosInstance</span> <span class="keyword">extends</span> <span class="title class_">Axios</span> &#123;<span class="comment">//axios实例接口 既有函数类型又有属性接口</span></span><br><span class="line">  (<span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">AxiosPromis</span>) <span class="comment">//(config单参)</span></span><br><span class="line">  (<span class="attr">url</span>: <span class="built_in">string</span>, <span class="attr">config</span>?: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">AxiosPromise</span> <span class="comment">//添加：函数重载(url+config双参)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>core &#x2F; Axios.ts</p><blockquote><p>修改 request 方法</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">request</span>(<span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">AxiosPromise</span> &#123;<span class="comment">// 实现request方法传入config参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">dispatchRequest</span>(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改为 👇</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">request</span>(<span class="attr">url</span>: <span class="built_in">any</span>, <span class="attr">config</span>: <span class="built_in">any</span>): <span class="title class_">AxiosPromise</span> &#123;<span class="comment">// 实现request方法传入url？config？参数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> url === <span class="string">&#x27;string&#x27;</span>) &#123; <span class="comment">//url+config双参</span></span><br><span class="line">        <span class="keyword">if</span> (!config) &#123;</span><br><span class="line">            config = &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        config.<span class="property">url</span> = url</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">//config单参</span></span><br><span class="line">        config = url <span class="comment">//此时的url就是config</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">dispatchRequest</span>(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="响应数据支持泛型"><a href="#响应数据支持泛型" class="headerlink" title="响应数据支持泛型"></a>响应数据支持泛型</h3><blockquote><p>通常情况，我们会将后端返回数据格式单独放入一个接口中</p></blockquote><p>设置泛型，提高类型灵活性</p><p>type &#x2F; index.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">AxiosResponse</span>&lt;T = <span class="built_in">any</span>&gt; &#123; <span class="comment">//response接口</span></span><br><span class="line">    <span class="attr">data</span>: T</span><br><span class="line">    <span class="attr">status</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">statusText</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">headers</span>: <span class="built_in">any</span></span><br><span class="line">    <span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span></span><br><span class="line">    <span class="attr">request</span>: <span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">AxiosPromise</span>&lt;T = <span class="built_in">any</span>&gt; <span class="keyword">extends</span> <span class="title class_">Promise</span>&lt;<span class="title class_">AxiosResponse</span>&lt;T&gt;&gt; &#123; <span class="comment">//promise接口</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Axios</span> &#123; <span class="comment">//axios接口</span></span><br><span class="line">    request&lt;T = <span class="built_in">any</span>&gt;(<span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">AxiosPromise</span>&lt;T&gt;</span><br><span class="line">    get&lt;T = <span class="built_in">any</span>&gt;(<span class="attr">url</span>: <span class="built_in">string</span>, <span class="attr">config</span>?: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">AxiosPromise</span>&lt;T&gt;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">AxiosInstance</span> <span class="keyword">extends</span> <span class="title class_">Axios</span> &#123; <span class="comment">//axios实例接口 既有函数类型又有属性接口</span></span><br><span class="line">&lt;T = <span class="built_in">any</span>&gt;(<span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">AxiosPromise</span>&lt;T&gt;</span><br><span class="line">&lt;T = <span class="built_in">any</span>&gt;(<span class="attr">url</span>: <span class="built_in">string</span>, <span class="attr">config</span>?: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">AxiosPromise</span>&lt;T&gt; <span class="comment">//函数重载</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拦截器实现"><a href="#拦截器实现" class="headerlink" title="拦截器实现"></a>拦截器实现</h2><blockquote><p>也就是 axios 二次封装中常见的请求拦截器 &amp; 响应拦截器</p><p>我们先回顾一下用户 asios 拦截器是怎么写的</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>:<span class="string">&#x27;/api</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">instance.interceptors.request.use(res =&gt;&#123;//请求拦截器</span></span><br><span class="line"><span class="string">    console.log(&#x27;</span>res<span class="string">&#x27;,res)</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">instance.interceptors.response.use(res =&gt;&#123;//响应拦截器</span></span><br><span class="line"><span class="string">    console.log(&#x27;</span>res<span class="string">&#x27;,res)</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default instance</span></span><br></pre></td></tr></table></figure><p>Tip：request 是后添加的先执行，response 是先添加的先执行</p></blockquote><h3 id="拦截器管理类"><a href="#拦截器管理类" class="headerlink" title="拦截器管理类"></a>拦截器管理类</h3><p>types &#x2F; index.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">AxiosInterceptorManager</span>&lt;T&gt; &#123;</span><br><span class="line"><span class="comment">//拦截器接口</span></span><br><span class="line"><span class="title function_">use</span>(<span class="attr">resolved</span>: <span class="title class_">ResolvedFn</span>&lt;T&gt;, <span class="attr">rejected</span>?: <span class="title class_">RejectedFn</span>): <span class="built_in">number</span> <span class="comment">//添加拦截器 返回拦截器id</span></span><br><span class="line"><span class="title function_">eject</span>(<span class="attr">id</span>: <span class="built_in">number</span>): <span class="built_in">void</span> <span class="comment">//删除拦截器 返回拦截器id</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ResolvedFn</span>&lt;T = <span class="built_in">any</span>&gt; &#123;</span><br><span class="line"><span class="comment">//成功拦截器接口</span></span><br><span class="line">(<span class="attr">val</span>: T): T | <span class="title class_">Promise</span>&lt;T&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">RejectedFn</span> &#123;</span><br><span class="line"><span class="comment">//失败拦截器接口</span></span><br><span class="line">(<span class="attr">error</span>: <span class="built_in">any</span>): <span class="built_in">any</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>core &#x2F; interceptorManager.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ResolvedFn</span>, <span class="title class_">RejectedFn</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Interceptor</span>&lt;T&gt; &#123;</span><br><span class="line"><span class="comment">// 拦截器接口</span></span><br><span class="line"><span class="attr">resolved</span>: <span class="title class_">ResolvedFn</span>&lt;T&gt;</span><br><span class="line"><span class="attr">rejected</span>?: <span class="title class_">RejectedFn</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">InterceptorManager</span>&lt;T&gt; &#123;</span><br><span class="line"><span class="comment">// 拦截器管理类</span></span><br><span class="line"><span class="keyword">private</span> <span class="attr">interceptors</span>: <span class="title class_">Array</span>&lt;<span class="title class_">Interceptor</span>&lt;T&gt;&gt; <span class="comment">// 拦截器数组存放的是拦截器对象 每个对象有两个属性 resolved rejected</span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 构造函数 初始化拦截器数组</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">interceptors</span> = [] <span class="comment">// 拦截器数组中存放的是拦截器对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">use</span>(<span class="attr">resolved</span>: <span class="title class_">ResolvedFn</span>&lt;T&gt;, <span class="attr">rejected</span>?: <span class="title class_">RejectedFn</span>): <span class="built_in">number</span> &#123;</span><br><span class="line"><span class="comment">// 添加拦截器</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">interceptors</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="comment">// 将拦截器对象添加到拦截器数组中</span></span><br><span class="line">resolved,</span><br><span class="line">rejected,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">interceptors</span>.<span class="property">length</span> - <span class="number">1</span> <span class="comment">// 返回拦截器的id 用于删除拦截器</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">forEach</span>(<span class="attr">fn</span>: <span class="function">(<span class="params"><span class="attr">interceptor</span>: <span class="title class_">Interceptor</span>&lt;T&gt;</span>) =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span> &#123;</span><br><span class="line"><span class="comment">// 遍历拦截器</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">interceptors</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">interceptor</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 遍历拦截器数组</span></span><br><span class="line"><span class="keyword">if</span> (interceptor !== <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// 判断拦截器是否存在</span></span><br><span class="line"><span class="title function_">fn</span>(interceptor) <span class="comment">// 存在则调用fn函数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">eject</span>(<span class="attr">id</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line"><span class="comment">// 删除拦截器 通过id删除拦截器</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">interceptors</span>[id]) &#123;</span><br><span class="line"><span class="comment">// 判断拦截器是否存在</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">interceptors</span>[id] = <span class="literal">null</span> <span class="comment">// 存在则将拦截器置为null</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链式调用实现"><a href="#链式调用实现" class="headerlink" title="链式调用实现"></a>链式调用实现</h3><p>core &#x2F; Axios.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AxiosRequestConfig</span>, <span class="title class_">AxiosPromise</span>,<span class="title class_">AxiosResponse</span>, <span class="title class_">Method</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../types&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">InterceptorManager</span> <span class="keyword">from</span> <span class="string">&#x27;./interceptorManager&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Interceptors</span> &#123;</span><br><span class="line">    <span class="attr">request</span>: <span class="title class_">InterceptorManager</span>&lt;<span class="title class_">AxiosRequestConfig</span>&gt;</span><br><span class="line">    <span class="attr">response</span>: <span class="title class_">InterceptorManager</span>&lt;<span class="title class_">AxiosResponse</span>&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Axios</span> &#123;</span><br><span class="line">    <span class="attr">interceptors</span>: <span class="title class_">Interceptors</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">interceptors</span> = &#123; <span class="comment">//用户可以通过axios.interceptors.request.use()添加拦截器</span></span><br><span class="line">            <span class="attr">request</span>: <span class="keyword">new</span> <span class="title class_">InterceptorManager</span>&lt;<span class="title class_">AxiosRequestConfig</span>&gt;(),</span><br><span class="line">            <span class="attr">response</span>: <span class="keyword">new</span> <span class="title class_">InterceptorManager</span>&lt;<span class="title class_">AxiosResponse</span>&gt;()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">request</span>(...)...</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完善 request (实现调用链)</p><blockquote><p><img src="C:\Users\DELL\AppData\Roaming\Typora\typora-user-images\image-20250218152615640.png" alt="image-20250218152615640"></p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AxiosRequestConfig</span>, <span class="title class_">AxiosPromise</span>, <span class="title class_">AxiosResponse</span>, <span class="title class_">Method</span>,<span class="title class_">ResolvedFn</span>,<span class="title class_">RejectedFn</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PromiseChain</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="attr">resolved</span>: <span class="title class_">ResolvedFn</span>&lt;T&gt; | (<span class="function">(<span class="params"><span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span></span>) =&gt;</span> <span class="title class_">AxiosPromise</span>)<span class="comment">//resolved是一个函数类型 接收一个AxiosRequestConfig类型的参数 返回一个AxiosPromise类型的参数</span></span><br><span class="line">    <span class="attr">rejected</span>?: <span class="title class_">RejectedFn</span> <span class="comment">//rejected是一个函数类型 接收一个AxiosRequestConfig类型的参数 返回一个AxiosPromise类型的参数</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="title function_">request</span>(<span class="attr">url</span>: <span class="built_in">any</span>, <span class="attr">config</span>: <span class="built_in">any</span>): <span class="title class_">AxiosPromise</span> &#123;<span class="comment">// 实现request方法传入参数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> url === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!config) &#123;</span><br><span class="line">            config = &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        config.<span class="property">url</span> = url</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        config = url</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">chain</span>:<span class="title class_">PromiseChain</span>&lt;<span class="built_in">any</span>&gt;[] = [</span><br><span class="line">        &#123;<span class="comment">// 创建一个数组chain</span></span><br><span class="line">            <span class="attr">resolved</span>: dispatchRequest,</span><br><span class="line">            <span class="attr">rejected</span>: <span class="literal">undefined</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">interceptor</span> =&gt;</span> &#123;<span class="comment">// 遍历request拦截器</span></span><br><span class="line">        chain.<span class="title function_">unshift</span>(interceptor) <span class="comment">// 将拦截器添加到chain数组的开头</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">interceptor</span> =&gt;</span> &#123;<span class="comment">// 遍历response拦截器</span></span><br><span class="line">        chain.<span class="title function_">push</span>(interceptor) <span class="comment">// 将拦截器添加到chain数组的末尾</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> promise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(config) <span class="comment">// 创建一个promise对象 并传入config参数</span></span><br><span class="line">    <span class="keyword">while</span> (chain.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="comment">// 遍历chain数组</span></span><br><span class="line">        <span class="keyword">const</span> &#123; resolved, rejected &#125; = chain.<span class="title function_">shift</span>()! <span class="comment">// 取出chain数组的第一个元素</span></span><br><span class="line">              promise = promise.<span class="title function_">then</span>(resolved, rejected) <span class="comment">// 将promise对象的then方法传入resolved和rejected参数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">dispatchRequest</span>(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="合并用户配置"><a href="#合并用户配置" class="headerlink" title="合并用户配置"></a>合并用户配置</h2><blockquote><p>用户在发送请求时可以传入一个配置来决定请求的不同行为</p><p>甚至可以直接修改一些默认配置 (defaults)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">common</span>[<span class="string">&#x27;test&#x27;</span>] = <span class="number">123</span> <span class="comment">//默认对任何类型的请求的header都添加test属性</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">post</span>[<span class="string">&#x27;Content-Type&#x27;</span>] =</span><br><span class="line"><span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span> <span class="comment">//默认对post请求的header都添加Content-Type属性</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">2000</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="默认配置设置"><a href="#默认配置设置" class="headerlink" title="默认配置设置"></a>默认配置设置</h3><p>defaults.ts 配置默认请求</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AxiosRequestConfig</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">defaults</span>: <span class="title class_">AxiosRequestConfig</span> = &#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line"><span class="attr">timeout</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">headers</span>: &#123;</span><br><span class="line"><span class="attr">common</span>: &#123;</span><br><span class="line"><span class="title class_">Accept</span>: <span class="string">&#x27;application/json, text/plain, */*&#x27;</span>, <span class="comment">//通用的请求头 接受的响应类型为json/plain文本*/*表示任意类型 优先级最低</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> methodsNoData = [<span class="string">&#x27;delete&#x27;</span>, <span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;head&#x27;</span>, <span class="string">&#x27;options&#x27;</span>]</span><br><span class="line"></span><br><span class="line">methodsNoData.<span class="title function_">forEach</span>(<span class="function">(<span class="params">method</span>) =&gt;</span> &#123;</span><br><span class="line">defaults.<span class="property">headers</span>[method] = &#123;&#125; <span class="comment">//没有数据的请求头 优先级高于通用的请求头</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> methodsWithData = [<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;put&#x27;</span>, <span class="string">&#x27;patch&#x27;</span>]</span><br><span class="line"></span><br><span class="line">methodsWithData.<span class="title function_">forEach</span>(<span class="function">(<span class="params">method</span>) =&gt;</span> &#123;</span><br><span class="line">defaults.<span class="property">headers</span>[method] = &#123;</span><br><span class="line"><span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>, <span class="comment">//表单提交的请求头 优先级高于通用的请求头</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defaults</span><br></pre></td></tr></table></figure><p>core &#x2F; Axios.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Axios</span> &#123;</span><br><span class="line">    <span class="attr">defaults</span>: <span class="title class_">AxiosRequestConfig</span></span><br><span class="line">    <span class="attr">interceptors</span>: <span class="title class_">Interceptors</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">initConfig</span>?: <span class="title class_">AxiosRequestConfig</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">defaults</span> = initConfig <span class="comment">// 初始化defaults属性</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">interceptors</span> = &#123;</span><br><span class="line">            <span class="comment">//用户可以通过axios.interceptors.request.use()添加拦截器</span></span><br><span class="line">            <span class="attr">request</span>: <span class="keyword">new</span> <span class="title class_">InterceptorManager</span>&lt;<span class="title class_">AxiosRequestConfig</span>&gt;(),</span><br><span class="line">            <span class="attr">response</span>: <span class="keyword">new</span> <span class="title class_">InterceptorManager</span>&lt;<span class="title class_">AxiosResponse</span>&gt;()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>types &#x2F; index.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Axios</span> &#123;</span><br><span class="line">    <span class="attr">defaults</span>: <span class="title class_">AxiosRequestConfig</span> <span class="comment">//默认配置</span></span><br><span class="line">    <span class="attr">interceptors</span>: &#123; <span class="comment">//拦截器</span></span><br><span class="line">        <span class="attr">request</span>: <span class="title class_">AxiosInterceptorManager</span>&lt;<span class="title class_">AxiosRequestConfig</span>&gt;</span><br><span class="line">        <span class="attr">response</span>: <span class="title class_">AxiosInterceptorManager</span>&lt;<span class="title class_">AxiosResponse</span>&gt;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写 axios.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AxiosInstance</span>, <span class="title class_">AxiosRequestConfig</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./types&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Axios</span> <span class="keyword">from</span> <span class="string">&#x27;./core/Axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; extend &#125; <span class="keyword">from</span> <span class="string">&#x27;./helpers/util&#x27;</span></span><br><span class="line"><span class="keyword">import</span> defaults <span class="keyword">from</span> <span class="string">&#x27;./defaults&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createInstance</span>(<span class="params"><span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span></span>): <span class="title class_">AxiosInstance</span> &#123;</span><br><span class="line"><span class="keyword">const</span> context = <span class="keyword">new</span> <span class="title class_">Axios</span>(config) <span class="comment">//创建一个 Axios 实例 并传入 config 参数 并赋值给 context 变量</span></span><br><span class="line"><span class="keyword">const</span> instance = <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">request</span>.<span class="title function_">bind</span>(context) <span class="comment">//调用 request 方法 并传入 context 参数 并赋值给 instance 变量 绑定 this 指向 context</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">extend</span>(instance, context) <span class="comment">//调用 extend 方法 并传入 instance 和 context 参数 实现 instance 对象继承 context 对象</span></span><br><span class="line"><span class="keyword">return</span> instance <span class="keyword">as</span> <span class="title class_">AxiosInstance</span> <span class="comment">//返回 instance 对象 并断言为 AxiosInstance 类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> axios = <span class="title function_">createInstance</span>(defaults) <span class="comment">//调用 createInstance 方法 并传入 defaults 参数 并赋值给 axios 变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios</span><br></pre></td></tr></table></figure><h3 id="合并策略实现"><a href="#合并策略实现" class="headerlink" title="合并策略实现"></a>合并策略实现</h3><p>创建 core &#x2F; mergeConfig.ts</p><blockquote><p><code>config1</code> 为默认配置</p><p><code>config2</code> 代表用户传入的自定义配置</p><blockquote><p>实现示例 (假设 <code>config1</code> 和 <code>config2</code> 如下：)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config1 = &#123;</span><br><span class="line"><span class="attr">timeout</span>: <span class="number">1000</span>,</span><br><span class="line"><span class="attr">headers</span>: &#123;</span><br><span class="line"><span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config2 = &#123;</span><br><span class="line"><span class="attr">timeout</span>: <span class="number">2000</span>,</span><br><span class="line"><span class="attr">headers</span>: &#123;</span><br><span class="line"><span class="title class_">Authorization</span>: <span class="string">&#x27;Bearer token&#x27;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>合并 <code>timeout</code> 属性时，<code>val1</code> 就是 <code>config1.timeout</code> 的值 <code>1000</code>，<code>val2</code> 就是 <code>config2.timeout</code> 的值 <code>2000</code>。</p></blockquote></blockquote><h4 id="timeout-逻辑"><a href="#timeout-逻辑" class="headerlink" title="timeout 逻辑"></a>timeout 逻辑</h4><p>mergeConfig.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AxiosRequestConfig</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> strats = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>) <span class="comment">//合并策略 key为属性名 value为合并策略函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defaultStrat</span>(<span class="params"><span class="attr">val1</span>: <span class="built_in">any</span>, <span class="attr">val2</span>: <span class="built_in">any</span></span>): <span class="built_in">any</span> &#123;</span><br><span class="line"><span class="comment">//默认合并策略</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">typeof</span> val2 !== <span class="string">&#x27;undefined&#x27;</span> ? val2 : val1 <span class="comment">//优先取val2 如果val2不存在则取val1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fromVal2Strat</span>(<span class="params"><span class="attr">val1</span>: <span class="built_in">any</span>, <span class="attr">val2</span>: <span class="built_in">any</span></span>): <span class="built_in">any</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> val2 !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">//忽略val1 只取val2</span></span><br><span class="line"><span class="keyword">return</span> val2</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stratKeysFromVal2 = [<span class="string">&#x27;url&#x27;</span>, <span class="string">&#x27;params&#x27;</span>, <span class="string">&#x27;data&#x27;</span>]</span><br><span class="line"></span><br><span class="line">stratKeysFromVal2.<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//对于url params data属性 只取val2</span></span><br><span class="line">strats[key] = fromVal2Strat</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">mergeConfig</span>(<span class="params"></span></span><br><span class="line"><span class="params"><span class="attr">config1</span>: <span class="title class_">AxiosRequestConfig</span>,</span></span><br><span class="line"><span class="params"><span class="attr">config2</span>?: <span class="title class_">AxiosRequestConfig</span></span></span><br><span class="line"><span class="params"></span>): <span class="title class_">AxiosRequestConfig</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!config2) &#123;</span><br><span class="line">config2 = &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> config = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>) <span class="comment">//合并后的配置结果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> config2) &#123;</span><br><span class="line"><span class="title function_">mergeField</span>(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> config1) &#123;</span><br><span class="line"><span class="keyword">if</span> (!config2[key]) &#123;</span><br><span class="line"><span class="title function_">mergeField</span>(key)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mergeField</span>(<span class="params"><span class="attr">key</span>: <span class="built_in">string</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line"><span class="keyword">const</span> strat = strats[key] || defaultStrat <span class="comment">//合并策略</span></span><br><span class="line">config[key] = <span class="title function_">strat</span>(config1[key], config2![key])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>types &#x2F; index.ts 添加自动索引</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">AxiosRequestConfig</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    [<span class="attr">propName</span>: <span class="built_in">string</span>]: <span class="built_in">any</span> <span class="comment">//字符串自动索引</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="headers-逻辑"><a href="#headers-逻辑" class="headerlink" title="headers 逻辑"></a>headers 逻辑</h4><h5 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepMergeStrat</span>(<span class="params"><span class="attr">val1</span>: <span class="built_in">any</span>, <span class="attr">val2</span>: <span class="built_in">any</span></span>): <span class="built_in">any</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">isPlainObject</span>(val2)) &#123;</span><br><span class="line"><span class="comment">//如果val2是对象</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">deepMerge</span>(val1, val2) <span class="comment">//递归合并</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> val2 !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">//如果val2不是对象 且val2存在</span></span><br><span class="line"><span class="keyword">return</span> val2</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isPlainObject</span>(val1)) &#123;</span><br><span class="line"><span class="comment">//如果val2不是对象 且val2不存在 且val1是对象</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">deepMerge</span>(val1) <span class="comment">//递归合并</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> val1 !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">//如果val2不是对象 且val2不存在 且val1不是对象 且val1存在</span></span><br><span class="line"><span class="keyword">return</span> val1</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>deepMerge 工具函数实现</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">deepMerge</span>(<span class="params">...<span class="attr">objs</span>: <span class="built_in">any</span>[]</span>): <span class="built_in">any</span> &#123;</span><br><span class="line"><span class="comment">// 深度合并对象</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">objs.<span class="title function_">forEach</span>(<span class="function">(<span class="params">obj</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (obj) &#123;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> val = obj[key]</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">isPlainObject</span>(val)) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">isPlainObject</span>(result[key])) &#123;</span><br><span class="line">result[key] = <span class="title function_">deepMerge</span>(result[key], val)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result[key] = <span class="title function_">deepMerge</span>(val)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result[key] = val</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在请求中应用函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">request</span>(<span class="attr">url</span>: <span class="built_in">any</span>, <span class="attr">config</span>: <span class="built_in">any</span>): <span class="title class_">AxiosPromise</span> &#123; <span class="comment">// 实现request方法传入参数</span></span><br><span class="line">    。。。</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> url === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!config) &#123;</span><br><span class="line">            config = &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        config.<span class="property">url</span> = url</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        config = url</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送请求之前应用</span></span><br><span class="line">    config = <span class="variable language_">this</span>.<span class="title function_">mergeConfig</span>(<span class="variable language_">this</span>.<span class="property">defaults</span>,config) <span class="comment">// 合并config</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">chain</span>:<span class="title class_">PromiseChain</span>&lt;<span class="built_in">any</span>&gt;[] = [</span><br><span class="line">        &#123;<span class="comment">// 创建一个数组chain</span></span><br><span class="line">            <span class="attr">resolved</span>: dispatchRequest,</span><br><span class="line">            <span class="attr">rejected</span>: <span class="literal">undefined</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">    。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h5><blockquote><p>合并后的 headers 是一个复杂对象，多了 common、post、get 等属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">headers:&#123;</span><br><span class="line">    common:&#123;</span><br><span class="line">    Accept:&#x27;application/json,text/plain,*/*&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    post: &#123;</span><br><span class="line">    &#x27;Content-Type&#x27;:&#x27;application/x-www-form-urlencoded&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要压缩成一级</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">headers:&#123;</span><br><span class="line">Accept:&#x27;application/json,text/plain,*/*&#x27;,</span><br><span class="line">&#x27;Content-Type&#x27;:&#x27;application/x-www-form-urlencoded&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tip：对于 comman 中定义的 header 字段，我们都要提取，而对于 post、get 这类提取，需要和该次请求的方法对应。</p></blockquote><p>headers.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">flattenHeaders</span>(<span class="params"><span class="attr">headers</span>: <span class="built_in">any</span>, <span class="attr">method</span>: <span class="title class_">Method</span></span>): <span class="built_in">any</span> &#123;</span><br><span class="line"><span class="comment">// flattenHeaders 函数接收 headers 和 method 参数 将 headers 中的属性名规范化 并删除不必要的属性 并返回一个新的 headers 对象</span></span><br><span class="line"><span class="keyword">if</span> (!headers) &#123;</span><br><span class="line"><span class="comment">// 如果 headers 不存在</span></span><br><span class="line"><span class="keyword">return</span> headers <span class="comment">// 返回 headers</span></span><br><span class="line">&#125;</span><br><span class="line">headers = <span class="title function_">deepMerge</span>(headers, <span class="literal">null</span>) <span class="comment">// 调用 deepMerge 函数将 headers 深度合并</span></span><br><span class="line"><span class="keyword">const</span> methodsToDelete = [</span><br><span class="line"><span class="comment">// 定义一个数组 methodsToDelete 存储需要删除的 headers 属性名</span></span><br><span class="line"><span class="string">&#x27;delete&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;get&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;head&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;options&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;post&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;put&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;patch&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;common&#x27;</span>,</span><br><span class="line">]</span><br><span class="line">methodsToDelete.<span class="title function_">forEach</span>(<span class="function">(<span class="params">method</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 遍历 methodsToDelete 数组</span></span><br><span class="line"><span class="keyword">delete</span> headers[method] <span class="comment">// 删除 headers 的属性名</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> headers <span class="comment">// 返回 headers</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dispatchRequest.ts 应用函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">processConfig</span>(<span class="params"><span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line"><span class="comment">// 处理 config</span></span><br><span class="line">config.<span class="property">url</span> = <span class="title function_">transformURL</span>(config)</span><br><span class="line">config.<span class="property">headers</span> = <span class="title function_">transformHeaders</span>(config) <span class="comment">// 先处理 headers</span></span><br><span class="line">config.<span class="property">data</span> = <span class="title function_">transformRequestData</span>(config) <span class="comment">// 再处理 data</span></span><br><span class="line">config.<span class="property">headers</span> = <span class="title function_">flattenHeaders</span>(config.<span class="property">headers</span>, config.<span class="property">method</span>!) <span class="comment">//处理 headers 扁平化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更多配置"><a href="#更多配置" class="headerlink" title="更多配置"></a>更多配置</h3><h4 id="transfromRequest-transfromResponse"><a href="#transfromRequest-transfromResponse" class="headerlink" title="transfromRequest &amp; transfromResponse"></a>transfromRequest &amp; transfromResponse</h4><blockquote><p>官方 axios 中提供<code>transfromRequest</code>&amp;<code>transfromResponse</code>，值为**<em>一个数组或一个函数</em>**</p><p>这两个属性允许用户在 <strong>数据发送到服务器之前</strong>(只适用于 put、post、patch，而且可以修改 headers 对象) &#x2F; <strong>把响应数据传递给 then 或 catch 之前</strong> 对其修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">    transformRequest: [</span><br><span class="line">        (function(data) &#123;</span><br><span class="line">            return qs.stringify(data); // 自定义的 transformRequest</span><br><span class="line">        &#125;),</span><br><span class="line">        ...axios.defaults.transformRequest // 保留默认的 transformRequest</span><br><span class="line">    ],</span><br><span class="line">    transformResponse: [</span><br><span class="line">        ...axios.defaults.transformResponse, // 展开默认的 transformResponse</span><br><span class="line">        function(data) &#123;</span><br><span class="line">            if (typeof data === &#x27;object&#x27;) &#123; // 自定义的 transformResponse</span><br><span class="line">                data.b = 2; // 修改响应数据</span><br><span class="line">            &#125;</span><br><span class="line">            return data;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    url: &#x27;/config/post&#x27;, // 请求的 URL</span><br><span class="line">    method: &#x27;post&#x27;, // 请求方法</span><br><span class="line">    data: &#123;</span><br><span class="line">        a: 1 // 请求的数据</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></blockquote><h5 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h5><p>types &#x2F; index.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">AxiosRequestConfig</span> &#123;</span><br><span class="line"><span class="comment">//config接口</span></span><br><span class="line"><span class="attr">url</span>: <span class="built_in">string</span></span><br><span class="line"><span class="attr">method</span>?: <span class="title class_">Method</span></span><br><span class="line"><span class="attr">data</span>?: <span class="built_in">any</span></span><br><span class="line"><span class="attr">params</span>?: <span class="built_in">any</span></span><br><span class="line"><span class="attr">headers</span>?: <span class="built_in">any</span></span><br><span class="line"><span class="attr">responseType</span>?: <span class="title class_">XMLHttpRequestResponseType</span></span><br><span class="line"><span class="attr">timeout</span>?: <span class="built_in">number</span></span><br><span class="line"><span class="attr">transformRequest</span>?: <span class="title class_">AxiosTransformer</span> | <span class="title class_">AxiosTransformer</span>[] <span class="comment">//请求数据转换函数</span></span><br><span class="line"><span class="attr">transformResponse</span>?: <span class="title class_">AxiosTransformer</span> | <span class="title class_">AxiosTransformer</span>[] <span class="comment">//响应数据转换函数</span></span><br><span class="line"></span><br><span class="line">[<span class="attr">propName</span>: <span class="built_in">string</span>]: <span class="built_in">any</span> <span class="comment">//字符串自动索引</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">AxiosTransformer</span> &#123;</span><br><span class="line"><span class="comment">//转换接口</span></span><br><span class="line">(<span class="attr">data</span>: <span class="built_in">any</span>, <span class="attr">headers</span>?: <span class="built_in">any</span>): <span class="built_in">any</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>defaults.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; processHeaders &#125; <span class="keyword">from</span> <span class="string">&#x27;./helpers/header&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; transformRequest, transformResponse &#125; <span class="keyword">from</span> <span class="string">&#x27;./helpers/data&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">defaults</span>: <span class="title class_">AxiosRequestConfig</span> = &#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line"><span class="attr">timeout</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">headers</span>: &#123;</span><br><span class="line"><span class="attr">common</span>: &#123;</span><br><span class="line"><span class="title class_">Accept</span>: <span class="string">&#x27;application/json, text/plain, */*&#x27;</span>, <span class="comment">//通用的请求头 接受的响应类型为json/plain文本*/*表示任意类型 优先级最低</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="attr">transformRequest</span>: [</span><br><span class="line"><span class="keyword">function</span> (<span class="params"><span class="attr">data</span>: <span class="built_in">any</span>, <span class="attr">headers</span>: <span class="built_in">any</span></span>): <span class="built_in">any</span> &#123;</span><br><span class="line"><span class="title function_">processHeaders</span>(headers, data) <span class="comment">//处理请求头</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">transformRequest</span>(data) <span class="comment">//处理请求数据</span></span><br><span class="line">&#125;,</span><br><span class="line">],</span><br><span class="line"><span class="attr">transformResponse</span>: [</span><br><span class="line"><span class="keyword">function</span> (<span class="params"><span class="attr">data</span>: <span class="built_in">any</span></span>): <span class="built_in">any</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">transformResponse</span>(data) <span class="comment">//处理响应数据</span></span><br><span class="line">&#125;,</span><br><span class="line">],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="重构-transform-逻辑"><a href="#重构-transform-逻辑" class="headerlink" title="重构 transform 逻辑"></a>重构 transform 逻辑</h5><p>core &#x2F; transform.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AxiosTransformer</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">transform</span>(<span class="params"> <span class="comment">//transform函数接收data headers fns三个参数</span></span></span><br><span class="line"><span class="params"><span class="attr">data</span>: <span class="built_in">any</span>,</span></span><br><span class="line"><span class="params"><span class="attr">headers</span>: <span class="built_in">any</span>,</span></span><br><span class="line"><span class="params"><span class="attr">fns</span>?: <span class="title class_">AxiosTransformer</span> | <span class="title class_">AxiosTransformer</span>[]</span></span><br><span class="line"><span class="params"></span>): <span class="built_in">any</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!fns) &#123;</span><br><span class="line"><span class="comment">//如果没有传入fns 直接返回data</span></span><br><span class="line"><span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(fns)) &#123;</span><br><span class="line"><span class="comment">//如果fns不是数组 将其转为数组</span></span><br><span class="line">fns = [fns]</span><br><span class="line">&#125;</span><br><span class="line">fns.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//遍历fns数组 依次调用fn函数</span></span><br><span class="line">data = <span class="title function_">fn</span>(data, headers)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>core &#x2F; dispatchRequest.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> transform <span class="keyword">from</span> <span class="string">&#x27;./transform&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">processConfig</span>(<span class="params"><span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line"><span class="comment">// 处理 config</span></span><br><span class="line">config.<span class="property">url</span> = <span class="title function_">transformURL</span>(config)</span><br><span class="line">config.<span class="property">headers</span> = <span class="title function_">transformHeaders</span>(config) <span class="comment">// 先处理 headers</span></span><br><span class="line">config.<span class="property">data</span> = <span class="title function_">transformRequestData</span>(config) <span class="comment">// 再处理 data</span></span><br><span class="line">config.<span class="property">headers</span> = <span class="title function_">flattenHeaders</span>(config.<span class="property">headers</span>, config.<span class="property">method</span>!) <span class="comment">//处理 headers 扁平化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更改为 👇</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">processConfig</span>(<span class="params"><span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line"><span class="comment">// 处理 config</span></span><br><span class="line">config.<span class="property">url</span> = <span class="title function_">transformURL</span>(config)</span><br><span class="line">config.<span class="property">data</span> = <span class="title function_">transform</span>(config.<span class="property">data</span>, config.<span class="property">headers</span>, config.<span class="property">transformRequest</span>) <span class="comment">//处理 data</span></span><br><span class="line">config.<span class="property">headers</span> = <span class="title function_">flattenHeaders</span>(config.<span class="property">headers</span>, config.<span class="property">method</span>!) <span class="comment">//处理 headers 扁平化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删掉不用的东西</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; transformRequest, transformResponse &#125; <span class="keyword">from</span> <span class="string">&#x27;../helpers/data&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">transformRequestData</span>(<span class="params"><span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line"><span class="comment">// 处理 data 调用 transformRequest 方法</span></span><br><span class="line">config.<span class="property">data</span> = <span class="title function_">transformRequest</span>(config.<span class="property">data</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">transformHeaders</span>(<span class="params"><span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span></span>): <span class="built_in">any</span> &#123;</span><br><span class="line"><span class="comment">// 处理 headers 调用 processHeaders 方法</span></span><br><span class="line"><span class="keyword">const</span> &#123; headers = &#123;&#125;, data &#125; = config</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">processHeaders</span>(headers, data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更改逻辑</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">transformResponseData</span>(<span class="params"><span class="attr">res</span>: <span class="title class_">AxiosResponse</span></span>): <span class="title class_">AxiosResponse</span> &#123;</span><br><span class="line"><span class="comment">// 处理 response data</span></span><br><span class="line">res.<span class="property">data</span> = <span class="title function_">transform</span>(res.<span class="property">data</span>, res.<span class="property">headers</span>, res.<span class="property">config</span>.<span class="property">transformResponse</span>)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="create"><a href="#create" class="headerlink" title="create"></a>create</h4><blockquote><p>目前为止，我们的 axios 都是一个单例，一旦我们修改了 axios 的默认配置，会影响所有的请求。我们希望提供了一个<code>axios.create</code>的静态接口允许我们创建一个新的 axios 实例，同时允许我们传入新的配置和默认配置合并，并做为新的默认配置。</p></blockquote><h5 id="扩展新的接口"><a href="#扩展新的接口" class="headerlink" title="扩展新的接口"></a>扩展新的接口</h5><p>types &#x2F; index.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">AxiosStatic</span> <span class="keyword">extends</span> <span class="title class_">AxiosInstance</span> &#123;</span><br><span class="line"><span class="comment">//axios静态接口</span></span><br><span class="line"><span class="title function_">create</span>(<span class="attr">config</span>?: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">AxiosInstance</span> <span class="comment">//创建axios实例</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>axios.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AxiosRequestConfig</span>, <span class="title class_">AxiosStatic</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./types&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Axios</span> <span class="keyword">from</span> <span class="string">&#x27;./core/Axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; extend &#125; <span class="keyword">from</span> <span class="string">&#x27;./helpers/util&#x27;</span></span><br><span class="line"><span class="keyword">import</span> defaults <span class="keyword">from</span> <span class="string">&#x27;./defaults&#x27;</span></span><br><span class="line"><span class="keyword">import</span> mergeConfig <span class="keyword">from</span> <span class="string">&#x27;./core/mergeConfig&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createInstance</span>(<span class="params"><span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span></span>): <span class="title class_">AxiosStatic</span> &#123;</span><br><span class="line"><span class="keyword">const</span> context = <span class="keyword">new</span> <span class="title class_">Axios</span>(config) <span class="comment">//创建一个 Axios 实例 并传入 config 参数 并赋值给 context 变量</span></span><br><span class="line"><span class="keyword">const</span> instance = <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">request</span>.<span class="title function_">bind</span>(context) <span class="comment">//调用 request 方法 并传入 context 参数 并赋值给 instance 变量 绑定 this 指向 context</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">extend</span>(instance, context) <span class="comment">//调用 extend 方法 并传入 instance 和 context 参数 实现 instance 对象继承 context 对象</span></span><br><span class="line"><span class="keyword">return</span> instance <span class="keyword">as</span> <span class="title class_">AxiosStatic</span> <span class="comment">//返回 instance 对象 并断言为 AxiosStatic 类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> axios = <span class="title function_">createInstance</span>(defaults) <span class="comment">//调用 createInstance 方法 并传入 defaults 参数 并赋值给 axios 变量</span></span><br><span class="line"></span><br><span class="line">axios.<span class="property">create</span> = <span class="keyword">function</span> <span class="title function_">create</span>(<span class="params">config</span>) &#123;</span><br><span class="line"><span class="comment">//axios.create 方法接收一个 config 参数 并返回一个 createInstance 方法的调用结果 并传入 mergeConfig 方法的调用结果 并传入 defaults 和 config 参数</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">createInstance</span>(<span class="title function_">mergeConfig</span>(defaults, config))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深入前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>源码探究 runtime-core模块</title>
      <link href="/2025/03/04/%E6%B7%B1%E5%85%A5%E5%89%8D%E7%AB%AF/%E6%BA%90%E7%A0%81%E6%8E%A2%E7%A9%B6%20runtime-core%E6%A8%A1%E5%9D%97/"/>
      <url>/2025/03/04/%E6%B7%B1%E5%85%A5%E5%89%8D%E7%AB%AF/%E6%BA%90%E7%A0%81%E6%8E%A2%E7%A9%B6%20runtime-core%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="源码探究-runtime-core-模块"><a href="#源码探究-runtime-core-模块" class="headerlink" title="源码探究 runtime-core 模块"></a>源码探究 runtime-core 模块</h1><blockquote><p>接下来我们将对这行核心代码的源码进行全流程追踪</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#root&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注：在此之前我们已经通过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const rootContainer = document.querySelector(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><p>拿到 <strong><em>rootContainer</em></strong> ：<div id="app"></div></p></blockquote><p>拆分成两个步骤</p><blockquote><p>createApp(App)</p><p>.mount(“#root”)</p></blockquote><h2 id="createApp-App"><a href="#createApp-App" class="headerlink" title="createApp(App)"></a>createApp(App)</h2><h3 id="关于-App"><a href="#关于-App" class="headerlink" title="关于 App"></a>关于 App</h3><p>我们先来看用户这边的操作</p><p>App.js</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">App</span> = &#123;</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// UI逻辑</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">h</span>(</span><br><span class="line"><span class="comment">// Vue 中的创建虚拟 DOM 的辅助函数,用于创建虚拟 DOM 节点,接收三个参数：</span></span><br><span class="line"><span class="string">&#x27;div&#x27;</span>, <span class="comment">// type：要创建的 HTML 标签名或组件选项对象.</span></span><br><span class="line">&#123; <span class="attr">id</span>: <span class="string">&#x27;root&#x27;</span>, <span class="attr">class</span>: [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;hard&#x27;</span>] &#125;, <span class="comment">// props：标签属性,可以是一个 对象 或 数组.</span></span><br><span class="line"><span class="string">&#x27;hi, &#x27;</span> + <span class="variable language_">this</span>.<span class="property">msg</span> <span class="comment">// children：子节点,可以是 字符串、数字、数组、其他虚拟 DOM 节点.</span></span><br><span class="line">)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 组合式 API 的入口点,用于组合组件的逻辑，例如响应式数据、生命周期钩子、计算属性等</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">msg</span>: <span class="string">&#x27;mini-vue&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里给 h 辅助函数传入三个参数</p><p><strong><em>type</em></strong>：要创建的 HTML 标签名或组件选项对象(div)</p><p><strong><em>props</em></strong>：标签属性,可以是一个 对象 或 数组</p><p><strong><em>children</em></strong>：子节点,可以是 字符串、数字、数组、其他虚拟 DOM 节点</p></blockquote><p>来看看 h 辅助函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">h</span>(<span class="params"><span class="keyword">type</span>, props, children</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">createVNode</span>(<span class="keyword">type</span>, props, children)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着 createVNode</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createVNode</span>(<span class="params"><span class="keyword">type</span>, props, children</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> vnode = &#123;</span><br><span class="line"><span class="keyword">type</span>, <span class="comment">// 类型</span></span><br><span class="line">props, <span class="comment">// 属性</span></span><br><span class="line">children, <span class="comment">// 孩子</span></span><br><span class="line"><span class="attr">el</span>: <span class="literal">null</span>, <span class="comment">// 对应的真实dom</span></span><br><span class="line"><span class="attr">component</span>: <span class="literal">null</span>, <span class="comment">// 组件实例</span></span><br><span class="line"><span class="attr">key</span>: props === <span class="literal">null</span> || props === <span class="built_in">void</span> <span class="number">0</span> ? <span class="built_in">void</span> <span class="number">0</span> : props.<span class="property">key</span>, <span class="comment">// 唯一标识</span></span><br><span class="line"><span class="comment">// shapeFlag: getShapeFlag(type), // 类型标识</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> vnode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>现在 App 的结构就变成了这样</p><p>render()</p><blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">type<span class="punctuation">,</span> <span class="comment">// 类型</span></span><br><span class="line">props<span class="punctuation">,</span> <span class="comment">// 属性</span></span><br><span class="line">children<span class="punctuation">,</span> <span class="comment">// 孩子</span></span><br><span class="line">el<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> <span class="comment">// 对应的真实dom</span></span><br><span class="line">component<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> <span class="comment">// 组件实例</span></span><br><span class="line">key<span class="punctuation">:</span> props === <span class="literal"><span class="keyword">null</span></span> || props === void <span class="number">0</span> ? void <span class="number">0</span> <span class="punctuation">:</span> props.key<span class="punctuation">,</span> <span class="comment">// 唯一标识</span></span><br></pre></td></tr></table></figure></blockquote><p>setup()</p></blockquote><h3 id="关于-createApp"><a href="#关于-createApp" class="headerlink" title="关于 createApp"></a>关于 createApp</h3><blockquote><p>传入结构 App-&gt;rootComponent</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createApp</span>(<span class="params">rootComponent</span>) &#123;</span><br><span class="line"><span class="comment">//rootComponent就是App</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="title function_">mount</span>(<span class="params">rootContainer</span>) &#123;</span><br><span class="line"><span class="comment">//.mount方法的扩展</span></span><br><span class="line"><span class="keyword">const</span> vnode = <span class="title function_">createVNode</span>(rootComponent)</span><br><span class="line"><span class="title function_">render</span>(vnode, rootContainer)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由此进入.mount(“#root”)部分</p></blockquote><h2 id="mount-“-root”"><a href="#mount-“-root”" class="headerlink" title=".mount(“#root”)"></a>.mount(“#root”)</h2><blockquote><p>接着看 mount 方法的内部</p><p>&#x2F;&#x2F; 挂载回根容器<br>&#x2F;&#x2F; 先把根组件转换成虚拟节点 vnode<br>&#x2F;&#x2F; 之后所有的操作都会基于 vnode 做处理</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createApp</span>(<span class="params">rootComponent</span>) &#123;</span><br><span class="line"><span class="comment">// rootComponent 就是 &#123;render: ƒ, setup: ƒ&#125;</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="title function_">mount</span>(<span class="params">rootContainer</span>) &#123;</span><br><span class="line"><span class="comment">// rootContainer 就是 div#app</span></span><br><span class="line"><span class="keyword">const</span> vnode = <span class="title function_">createVNode</span>(rootComponent) <span class="comment">// 根组件转换成虚拟节点vnode</span></span><br><span class="line"><span class="title function_">render</span>(vnode, rootContainer) <span class="comment">// 将 vnode 渲染到 container 中</span></span><br><span class="line"><span class="comment">// 之后所有的操作都会基于vnode做处理</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="createVNode"><a href="#createVNode" class="headerlink" title="createVNode"></a>createVNode</h3><blockquote><p>rootComponent 传进来了 {render: ƒ, setup: ƒ}</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createVNode</span>(<span class="params"><span class="keyword">type</span>, props, children</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> vnode = &#123;</span><br><span class="line"><span class="keyword">type</span>, <span class="comment">// 类型</span></span><br><span class="line">props, <span class="comment">// 属性</span></span><br><span class="line">children, <span class="comment">// 孩子</span></span><br><span class="line"><span class="attr">el</span>: <span class="literal">null</span>, <span class="comment">// 对应的真实dom</span></span><br><span class="line"><span class="attr">component</span>: <span class="literal">null</span>, <span class="comment">// 组件实例</span></span><br><span class="line"><span class="attr">key</span>: props === <span class="literal">null</span> || props === <span class="built_in">void</span> <span class="number">0</span> ? <span class="built_in">void</span> <span class="number">0</span> : props.<span class="property">key</span>, <span class="comment">// 唯一标识</span></span><br><span class="line"><span class="comment">// shapeFlag: getShapeFlag(type), // 类型标识</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> vnode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>现在 {render: ƒ, setup: ƒ} 被挂到了虚拟节点的第一个属性 <strong><em>type</em></strong> 上</p></blockquote><blockquote><p>现在 <strong><em>vnode</em></strong> 的结构就变成了这样</p><p><strong>type</strong></p><blockquote><p>render()</p><blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">type<span class="punctuation">,</span> <span class="comment">// 类型</span></span><br><span class="line">props<span class="punctuation">,</span> <span class="comment">// 属性</span></span><br><span class="line">children<span class="punctuation">,</span> <span class="comment">// 孩子</span></span><br><span class="line">el<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> <span class="comment">// 对应的真实dom</span></span><br><span class="line">component<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> <span class="comment">// 组件实例</span></span><br><span class="line">key<span class="punctuation">:</span> props === <span class="literal"><span class="keyword">null</span></span> || props === void <span class="number">0</span> ? void <span class="number">0</span> <span class="punctuation">:</span> props.key<span class="punctuation">,</span> <span class="comment">// 唯一标识</span></span><br></pre></td></tr></table></figure></blockquote><p>setup()</p></blockquote><p><strong>props</strong></p><p><strong>children</strong></p><p><strong>el</strong></p><p><strong>component</strong></p><p><strong>key</strong></p></blockquote><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(vnode, rootContainer) <span class="comment">// 将 vnode 渲染到 container 中</span></span><br></pre></td></tr></table></figure><blockquote><p>vnode : 刚才写的结构 👆</p><p>rootContainer : div#app</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">vnode, container</span>) &#123;</span><br><span class="line"><span class="comment">// 直接指向patch函数</span></span><br><span class="line"><span class="title function_">patch</span>(vnode, container)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="patch-拆箱回调"><a href="#patch-拆箱回调" class="headerlink" title="patch 拆箱回调"></a>patch 拆箱回调</h3><blockquote><p>拆箱函数，深层回调的起点</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">patch</span>(<span class="params">vnode, container</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> vnode.<span class="property">type</span> === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">// 元素分支</span></span><br><span class="line"><span class="title function_">processElement</span>(vnode, container)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> vnode.<span class="property">type</span> === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">// 组件分支</span></span><br><span class="line"><span class="title function_">processComponent</span>(vnode)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="processComponent-组件分支（首次进入）"><a href="#processComponent-组件分支（首次进入）" class="headerlink" title="processComponent 组件分支（首次进入）"></a>processComponent 组件分支（首次进入）</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">processComponent</span>(<span class="params">vnode, container</span>) &#123;</span><br><span class="line"><span class="title function_">mountComponent</span>(vnode)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="mountComponent-组件初始化分支"><a href="#mountComponent-组件初始化分支" class="headerlink" title="mountComponent 组件初始化分支"></a>mountComponent 组件初始化分支</h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mountComponent</span>(<span class="params">vnode, container</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> instance = <span class="title function_">createComponentInstance</span>(vnode) <span class="comment">// 创建组件实例</span></span><br><span class="line"><span class="title function_">setupComponent</span>(instance) <span class="comment">// 处理组件</span></span><br><span class="line"><span class="title function_">setupRenderEffect</span>(instance, vnode, container) <span class="comment">// 处理组件渲染</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="createComponentInstance"><a href="#createComponentInstance" class="headerlink" title="createComponentInstance"></a>createComponentInstance</h6><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createComponentInstance</span>(<span class="params">vnode</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> instance = &#123;</span><br><span class="line">vnode,</span><br><span class="line"><span class="attr">type</span>: vnode.<span class="property">type</span>,</span><br><span class="line"><span class="attr">props</span>: vnode.<span class="property">props</span>,</span><br><span class="line"><span class="attr">slots</span>: vnode.<span class="property">slots</span>, <span class="comment">// 插槽</span></span><br><span class="line"><span class="attr">proxy</span>: <span class="literal">null</span>, <span class="comment">// 代理对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>返回的 <strong><em>instance</em></strong> 结构</p><p><strong>vnode</strong>(新增) ：继承当前传过来的整个 vnode 结构</p><p><strong>type</strong></p><blockquote><p>render()</p><blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">type<span class="punctuation">,</span> <span class="comment">// 类型</span></span><br><span class="line">props<span class="punctuation">,</span> <span class="comment">// 属性</span></span><br><span class="line">children<span class="punctuation">,</span> <span class="comment">// 孩子</span></span><br><span class="line">el<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> <span class="comment">// 对应的真实dom</span></span><br><span class="line">component<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> <span class="comment">// 组件实例</span></span><br><span class="line">key<span class="punctuation">:</span> props === <span class="literal"><span class="keyword">null</span></span> || props === void <span class="number">0</span> ? void <span class="number">0</span> <span class="punctuation">:</span> props.key<span class="punctuation">,</span> <span class="comment">// 唯一标识</span></span><br></pre></td></tr></table></figure></blockquote><p>setup()</p></blockquote><p><strong>props</strong></p><p><strong>slots</strong>(新增)</p><p><strong>proxy</strong>(新增)</p><p><strong>children</strong></p><p><strong>el</strong></p><p><strong>component</strong></p><p><strong>key</strong></p></blockquote><h6 id="setupComponent"><a href="#setupComponent" class="headerlink" title="setupComponent"></a>setupComponent</h6><blockquote><p>instance 的结构见上 👆</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setupComponent</span>(<span class="params">instance</span>) &#123;</span><br><span class="line"><span class="comment">// 初始化组件</span></span><br><span class="line"><span class="title function_">initProps</span>(instance)</span><br><span class="line"><span class="title function_">initSlots</span>(instance)</span><br><span class="line"><span class="title function_">setupStatefulComponent</span>(instance) <span class="comment">// 处理组件的setup</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>setupStatefulComponent</strong></p><blockquote><p>按这个例子来说，解构出来的 setup 结构为</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ƒ <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;mini-vue&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setupStatefulComponent</span>(<span class="params">instance</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Component</span> = instance.<span class="property">type</span> <span class="comment">// 先拿到组件 &#123;render: ƒ, setup: ƒ&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; setup &#125; = <span class="title class_">Component</span> <span class="comment">//解构出setup(结构见上面注释)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (setup) &#123;</span><br><span class="line"><span class="comment">// setCurrentInstance(instance)</span></span><br><span class="line"><span class="keyword">const</span> setupResult = <span class="title function_">setup</span>() <span class="comment">// &#123;msg: &#x27;mini-vue&#x27;&#125;</span></span><br><span class="line"><span class="comment">// setCurrentInstance(null)</span></span><br><span class="line"><span class="title function_">handleSetupResult</span>(instance, setupResult) <span class="comment">// instance &amp; &#123;msg: &#x27;mini-vue&#x27;&#125;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title function_">finishComponentSetup</span>(instance)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面这个先留个坑🕳后面看</span></span><br><span class="line">instance.<span class="property">proxy</span> = <span class="keyword">new</span> <span class="title class_">Proxy</span>(instance, &#123;</span><br><span class="line"><span class="comment">// 创建代理对象</span></span><br><span class="line"><span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> &#123; setup, props &#125; = target</span><br><span class="line"><span class="keyword">if</span> (key <span class="keyword">in</span> setup) &#123;</span><br><span class="line"><span class="keyword">return</span> setup[key]</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (key <span class="keyword">in</span> props) &#123;</span><br><span class="line"><span class="keyword">return</span> props[key]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如果 setup 存在</strong></p><p>handleSetupResult （处理组件的 setup）</p><blockquote><p>传入 instance &amp; {msg: ‘mini-vue’}</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleSetupResult</span>(<span class="params"><span class="attr">instance</span>: <span class="built_in">any</span>, <span class="attr">setupResult</span>: <span class="built_in">any</span></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> setupResult === <span class="string">&#x27;object&#x27;</span> &amp;&amp; setupResult !== <span class="literal">null</span>) &#123;</span><br><span class="line">instance.<span class="property">setupState</span> = setupResult <span class="comment">// instance新增属性setupState</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">finishComponentSetup</span>(instance) <span class="comment">// 处理组件的render</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>finishComponentSetup （处理组件的 render）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">finishComponentSetup</span>(<span class="params">instance</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Component</span> = instance.<span class="property">type</span> <span class="comment">// 先拿到组件 &#123;render: ƒ, setup: ƒ&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">Component</span>.<span class="property">render</span>) &#123;</span><br><span class="line">instance.<span class="property">render</span> = <span class="title class_">Component</span>.<span class="property">render</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">instance.<span class="property">render</span> = instance.<span class="property">vnode</span>.<span class="property">render</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里 instance 又新增了 render 属性</p></blockquote><p><strong>如果 setup 不存在</strong></p><blockquote><p>直接处理组件的 render</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">finishComponentSetup</span>(instance)</span><br></pre></td></tr></table></figure><blockquote><p>到这里就是组件初始化的最底层了，接下来我们回到 <em>mountComponent</em> 完成 <em>setupRenderEffect</em> 部分</p></blockquote><h6 id="setupRenderEffect"><a href="#setupRenderEffect" class="headerlink" title="setupRenderEffect"></a>setupRenderEffect</h6><blockquote><p>要传入三个参数 <strong><em>instance</em></strong>, <strong><em>vnode</em></strong>, <strong><em>container</em></strong></p><p>已知 <strong>container</strong> 作为容器为<div id="app"></div></p><p>到这里我们先梳理一下目前 <strong>instance</strong> &amp; <strong>vnode</strong> 内部的参数</p><table><thead><tr><th align="left">instance</th><th align="left">vnode</th><th align="center">属性</th></tr></thead><tbody><tr><td align="left">✅</td><td align="left">✅</td><td align="center">children</td></tr><tr><td align="left">✅</td><td align="left">✅</td><td align="center">component</td></tr><tr><td align="left">✅</td><td align="left">✅</td><td align="center">el</td></tr><tr><td align="left">✅</td><td align="left">✅</td><td align="center">key</td></tr><tr><td align="left">✅</td><td align="left">✅</td><td align="center">props</td></tr><tr><td align="left">✅ 内部是右边 vnode 的前五个属性</td><td align="left">⛔</td><td align="center"><strong><em>vnode</em></strong></td></tr><tr><td align="left">✅ { render: ƒ, setup: ƒ }</td><td align="left">✅ { render: ƒ, setup: ƒ }</td><td align="center"><strong><em>type</em></strong></td></tr><tr><td align="left">✅</td><td align="left">⛔</td><td align="center">proxy</td></tr><tr><td align="left">✅</td><td align="left">⛔</td><td align="center">slots</td></tr><tr><td align="left">✅ { msg: ‘mini-vue’ }</td><td align="left">⛔</td><td align="center">setupState</td></tr></tbody></table></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">setupRenderEffect</span>(<span class="params"><span class="attr">instance</span>: <span class="built_in">any</span>, <span class="attr">vnode</span>: <span class="built_in">any</span>, <span class="attr">container</span>: <span class="built_in">any</span></span>) &#123;</span><br><span class="line"><span class="comment">//我们先看这一部分</span></span><br><span class="line"><span class="keyword">const</span> &#123; proxy &#125; = instance</span><br><span class="line"><span class="keyword">const</span> subTree = instance.<span class="property">render</span>.<span class="title function_">call</span>(proxy) <span class="comment">// 注意!是这个时候去调用render里的h函数了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// vnode -&gt; patch</span></span><br><span class="line"><span class="comment">// vnode -&gt; element -&gt; mountElement</span></span><br><span class="line"><span class="comment">// patch(subTree, container)</span></span><br><span class="line"><span class="comment">// vnode.el = subTree.el</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回顾 h 函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">h</span>(<span class="params"><span class="keyword">type</span>, props, children</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">createVNode</span>(<span class="keyword">type</span>, props, children)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>再看这时候的 type, props, children 也就是用户样例</p><p>type：’div’</p><p>props：{ id: ‘root’, class: [‘red’, ‘hard’] }</p><p>children：’hi, mini-vue’</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createVNode</span>(<span class="params"><span class="keyword">type</span>, props, children</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> vnode = &#123;</span><br><span class="line"><span class="keyword">type</span>, <span class="comment">// 传入类型</span></span><br><span class="line">props, <span class="comment">// 传入属性</span></span><br><span class="line">children, <span class="comment">// 传入子节点</span></span><br><span class="line"><span class="attr">el</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="attr">component</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="attr">key</span>: props === <span class="literal">null</span> || props === <span class="built_in">void</span> <span class="number">0</span> ? <span class="built_in">void</span> <span class="number">0</span> : props.<span class="property">key</span>, <span class="comment">// 唯一标识</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> vnode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>那么接下来的 <strong><em>subTree</em></strong> 结构就是</p><p><strong>type</strong> &#x3D; ‘div’</p><p><strong>props</strong> &#x3D; { id: ‘root’, class: [‘red’, ‘hard’] }</p><p><strong>children</strong> &#x3D; ‘hi, mini-vue’</p><p><strong>el</strong></p><p><strong>component</strong></p><p><strong>key</strong></p></blockquote><blockquote><p>以及 <strong><em>container</em></strong> 结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span> <span class="attr">class</span>=<span class="string">&quot;red, hard&quot;</span>&gt;</span>hi, mini-vue<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>返回 <strong>setupRenderEffect</strong> 函数，继续看下面的逻辑</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">setupRenderEffect</span>(<span class="params"><span class="attr">instance</span>: <span class="built_in">any</span>, <span class="attr">vnode</span>: <span class="built_in">any</span>, <span class="attr">container</span>: <span class="built_in">any</span></span>) &#123;</span><br><span class="line"><span class="comment">// const &#123; proxy &#125; = instance</span></span><br><span class="line"><span class="comment">// const subTree = instance.render.call(proxy) // 注意!是这个时候去调用render里的h函数了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// vnode -&gt; patch</span></span><br><span class="line"><span class="comment">// vnode -&gt; element -&gt; mountElement</span></span><br><span class="line"><span class="title function_">patch</span>(subTree, container) <span class="comment">//传入subtree container</span></span><br><span class="line">vnode.<span class="property">el</span> = subTree.<span class="property">el</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时调用 <strong><em>patch</em></strong> 回调拆箱</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">patch</span>(<span class="params">vnode, container</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> vnode.<span class="property">type</span> === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">// 元素分支 &lt;-这次进这个</span></span><br><span class="line"><span class="title function_">processElement</span>(vnode, container) <span class="comment">// 此时的 vnode.type 已经是&#x27;div&#x27;了</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> vnode.<span class="property">type</span> === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">// 组件分支</span></span><br><span class="line"><span class="title function_">processComponent</span>(vnode)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>快进到下面的 processElement 元素分支</p></blockquote><h5 id="updateComponent-更新分支"><a href="#updateComponent-更新分支" class="headerlink" title="updateComponent 更新分支"></a>updateComponent 更新分支</h5><blockquote><p><strong><em>!!! 第一次看先掠过这一部分,先看后文 ‘processElement 元素分支’ 实现拆箱 !!!</em></strong></p></blockquote><h4 id="processElement-元素分支"><a href="#processElement-元素分支" class="headerlink" title="processElement 元素分支"></a>processElement 元素分支</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">processElement</span>(<span class="params">vnode, container</span>) &#123;</span><br><span class="line"><span class="title function_">mountElement</span>(vnode, container)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="mountElement-元素初始化分支"><a href="#mountElement-元素初始化分支" class="headerlink" title="mountElement 元素初始化分支"></a>mountElement 元素初始化分支</h5><blockquote><p>若以首次样例传入为例，进入文本节点</p><p>若以二次样例传入为例，进入数组节点</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mountElement</span>(<span class="params">vnode, container</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(vnode.<span class="property">type</span>) <span class="comment">// 创建真实dom &lt;div&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">const</span> &#123; children, props &#125; = vnode</span><br><span class="line"><span class="comment">// (首次)解构为</span></span><br><span class="line"><span class="comment">// &#x27;hi, mini-vue&#x27;</span></span><br><span class="line"><span class="comment">// &#123; id: &#x27;root&#x27;, class: [&#x27;red&#x27;, &#x27;hard&#x27;] &#125;</span></span><br><span class="line"><span class="comment">// (二次)解构为</span></span><br><span class="line"><span class="comment">// [h(&#x27;p&#x27;, &#123; class: &#x27;red&#x27; &#125;, &#x27;hi&#x27;), h(&#x27;p&#x27;, &#123; class: &#x27;blue&#x27; &#125;, &#x27;mini-vue&#x27;)]</span></span><br><span class="line"><span class="comment">// &#123; id: &#x27;root&#x27;, class: [&#x27;red&#x27;, &#x27;hard&#x27;] &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> children === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">// 文本节点(首次样例)</span></span><br><span class="line">el.<span class="property">textContent</span> = children <span class="comment">// 直接把&#x27;hi, mini-vue&#x27;插入到&lt;div&gt;&lt;/div&gt;下0位处</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(children)) &#123;</span><br><span class="line"><span class="comment">// 数组节点(二次样例)</span></span><br><span class="line"><span class="title function_">mountChildren</span>(vnode, el) <span class="comment">// 拆分数组 + patch回调 (此时el是&lt;p&gt;,container是&lt;div&gt;)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (props) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> props) &#123;</span><br><span class="line"><span class="comment">// 遍历key</span></span><br><span class="line"><span class="keyword">const</span> val = props[key] <span class="comment">// 拿到属性值val</span></span><br><span class="line">el.<span class="title function_">setAttribute</span>(key, val) <span class="comment">// Web内置API,把键值对嵌入div标签</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">container.<span class="title function_">append</span>(el) <span class="comment">// Web内置API,把el挂载到容器中</span></span><br><span class="line"><span class="comment">// (首次)挂载为</span></span><br><span class="line"><span class="comment">// container : &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">// el : &lt;div id=&quot;root&quot; class=&quot;red,hard&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">// (二次)挂载为</span></span><br><span class="line"><span class="comment">// container : &lt;div id=&quot;root&quot; class=&quot;red,hard&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">// el : &lt;p class=&quot;...&quot;&gt;&lt;/p&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>(首次样例) for (const key in props) 的过程</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span> <span class="attr">class</span>=<span class="string">&quot;red,hard&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>(首次样例) container.append(el) 的结果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- container --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt; 0 =</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span> <span class="attr">class</span>=<span class="string">&quot;red, hard&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt; &gt; 0 = hi, mini-vue</span><br></pre></td></tr></table></figure></blockquote><p>此时返回 <strong><em>setupRenderEffect</em></strong> 的最后一行</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vnode.<span class="property">el</span> = subTree.<span class="property">el</span></span><br></pre></td></tr></table></figure><blockquote><p>此时打开 html 网页，就可以看到屏幕上的 hi, mini-vue 字样了</p></blockquote><p><strong><em>!!! 二次复盘 !!!</em></strong></p><blockquote><p>现在我们将 h 的 children 参数改成数组</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="title function_">h</span>(</span><br><span class="line"><span class="comment">// 创建虚拟 DOM 节点,接收三个参数</span></span><br><span class="line"><span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">&#123; <span class="attr">id</span>: <span class="string">&#x27;root&#x27;</span>, <span class="attr">class</span>: [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;hard&#x27;</span>] &#125;,</span><br><span class="line"><span class="comment">// &#x27;hi, mini-vue&#x27; //string类型</span></span><br><span class="line">[<span class="title function_">h</span>(<span class="string">&#x27;p&#x27;</span>, &#123; <span class="attr">class</span>: <span class="string">&#x27;red&#x27;</span> &#125;, <span class="string">&#x27;hi&#x27;</span>), <span class="title function_">h</span>(<span class="string">&#x27;p&#x27;</span>, &#123; <span class="attr">class</span>: <span class="string">&#x27;blue&#x27;</span> &#125;, <span class="string">&#x27;mini-vue&#x27;</span>)] <span class="comment">// array类型</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>并且在 index.html 中添加 css 样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.blue</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></blockquote><p>还记得 children 判断类型的分支吗，就在刚写的 <strong><em>mountElement</em></strong> 函数里，返回去再看看，看完再回到这里</p><h6 id="mountChildren"><a href="#mountChildren" class="headerlink" title="mountChildren"></a>mountChildren</h6><blockquote><p>所以现在二次样例中的数据如下</p><p><strong>vnode.children</strong> 子节点标签数组</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;[<span class="title function_">h</span>(<span class="string">&#x27;p&#x27;</span>, &#123; <span class="attr">class</span>: <span class="string">&#x27;red&#x27;</span> &#125;, <span class="string">&#x27;hi&#x27;</span>), <span class="title function_">h</span>(<span class="string">&#x27;p&#x27;</span>, &#123; <span class="attr">class</span>: <span class="string">&#x27;blue&#x27;</span> &#125;, <span class="string">&#x27;mini-vue&#x27;</span>)]</span><br></pre></td></tr></table></figure><p><strong>container</strong> 根容器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mountChildren</span>(<span class="params"><span class="attr">vnode</span>: <span class="built_in">any</span>, <span class="attr">container</span>: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">vnode.<span class="property">children</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params"><span class="attr">v</span>: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">patch</span>(v, container) <span class="comment">// 递归处理children</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>取出来的 <strong><em>v</em></strong> 依此是</p><table><thead><tr><th align="center"></th><th align="center">第一次 (调用 h)</th><th align="center">第二次 (调用 h)</th></tr></thead><tbody><tr><td align="center"><strong>type</strong></td><td align="center">p</td><td align="center">p</td></tr><tr><td align="center"><strong>props</strong></td><td align="center">{ class: ‘ red ‘ }</td><td align="center">{ class: ‘ blue ‘ }</td></tr><tr><td align="center"><strong>children</strong></td><td align="center">‘ hi ‘</td><td align="center">‘ mini-vue ‘</td></tr></tbody></table></blockquote>]]></content>
      
      
      <categories>
          
          <category> 深入前端 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
